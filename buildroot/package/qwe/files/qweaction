#!/bin/sh

# Warning: Because qweaction can be invoked by QCSAPI, to avoid deadlock, any QCSAPI invoked by qweaction must be done in subprocess or add '-u' option

. import_qtnenv
APPEND_STRING="-Ext"

WPS_STATUS_INIT=0
WPS_STATUS_START=1
WPS_STATUS_SUCCESS=2
WPS_STATUS_ERROR=3
WPS_STATUS_TIMEOUT=4
WPS_STATUS_OVERLAP=5
WPS_STATUS_CANCEL=6
WPS_STATUS_UNKNOW=7
WPS_STATUS_PROCESS=8

usage_and_exit() {
	cat <<EOF
Usage: $0 <device> <command> [<argument>]
Devices:
	wlan0|wlan1|wlan2	: wlan device
Commands:
	load_driver		: load driver
	unload_driver		: unload driver
	down			: down the wlan
	up			: up the wlan
	commit			: take effect the settings
	scan			: start scan and print scan result
	status <argument>	: show current status
		version		:: show version
		channel		:: show current channel
		bandwidth	:: show current bandwidth
		wps		:: show WPS process status
		rootap		:: show the information of the associated AP, only valid under Bridge or Repeater mode
		<interface>	:: show interface status
	wps <argument>		: wps action
		pbc		:: start WPS PBC method
		<pinnumber>	:: start WPS PIN method
		stop		:: stop WPS process
		get_state	:: get runtime WPS state(disable | configured | unconfigured)
		set_dual_band	:: set to dual band forcibly
		set_single_band	:: set to single band forcibly
	list <argument>		: list more information
		capability	:: list capability
		allchannels	:: list all available channels
	stainfo <interface>	: show the information of the assocaited station
	stats <interface>	: show the statistic
	showhwaddr <interface>	: show the HW address of the interface
	setuuid <uuid>		: set the uuid to wps daemon
	sync_remote_ap		: sync AP configuration of remote 5G AP to QWE AP
EOF
	exit 1
}

check_wps_argv() {
	[ $# != 3 ] && usage_and_exit
	case $3 in
	    pbc|stop|get_state|set_dual_band|set_single_band|[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]) ;;
	    *) echo "Error argument: $3" >&2; exit 1 ;;
	esac
}

check_list_argv() {
	[ $# != 3 ] && usage_and_exit
	case $3 in
	    capability|allchannels) ;;
	    *) echo "Error argument: $3" >&2; exit 1 ;;
	esac
}

check_status_argv() {
	[ $# != 3 ] && usage_and_exit
	case $3 in
	    version|rf|ap|vap[0-3]|channel|bandwidth|wps) ;;
	    rootap)
		if [ "x$(qweconfig getrunning mode.$1)" = "x0" ]; then
			echo "Argument rootap is invalid under AP mode" >&2
			exit 1
		fi
		;;
	    *) echo "Error argument: $3" >&2; exit 1 ;;
	esac
}

check_argv_interface() {
	mode=$(qweconfig getrunning mode.$1)
	[ "$2" = "stats" -a "$3" = "rf" ] && return
	case $mode in
	    0)
		case $3 in
		    ap|vap[0-3]) ;;
		    sta) echo "Interface sta is invalid under AP mode" >&2; exit 1 ;;
		    *) echo "Error argument: $3" >&2; exit 1 ;;
		esac
		;;
	    1)
		if [ "$2" = "stainfo" ]; then
			echo "Command stainfo is invalid under Bridge mode" >&2
			exit 1
		fi
		case $3 in
		    ap|vap[0-3]) echo "Interface $3 is invalid under Bridge mode" >&2; exit 1 ;;
		    sta) ;;
		    *) echo "Error argument: $3" >&2; exit 1 ;;
		esac
		;;
	    2)
		if [ "$2" = "stainfo" -a "$3" = "sta" ]; then
			echo "Interface sta is invalid for command stainfo" >&2
			exit 1
		fi
		case $3 in
		    ap|sta) ;;
		    vap[0-3]) echo "Interface $3 is invalid under Repeater mode" >&2; exit 1 ;;
		    *) echo "Error argument: $3" >&2; exit 1 ;;
		esac
		;;
	    *) echo "Fail to get $1's running mode, maybe $1 is not up" >&2; exit 1 ;;
	esac
}

check_stainfo_argv() {
	[ $# != 3 ] && usage_and_exit
	check_argv_interface $@
}

check_stats_argv() {
	[ $# != 3 ] && usage_and_exit
	check_argv_interface $@
}

check_showhwaddr_argv() {
	[ $# != 3 ] && usage_and_exit
	check_argv_interface $@
}

check_setuuid_argv() {
	[ $# != 3 ] && usage_and_exit
}

extract_5g_network() {
	if [ "$(call_qcsapi -u get_bssid $qtn_sta_ifname)" == "00:00:00:00:00:00" ]; then
		return 1
	fi

	assoc_ssid=$(call_qcsapi -u get_SSID $qtn_sta_ifname)
	if [ "$(echo $assoc_ssid | grep "QCS API error")" != "" ]; then
		return 1
	fi

	supplicant_conf=$persistent_path/wpa_supplicant.conf
	line_num=$(sed -n "/^[[:space:]]*ssid=\"$assoc_ssid\"/=" $supplicant_conf)
	if [ "$line_num" = "" ]; then
		return 1
	fi

	remote_ap_config="/tmp/.remote_ap_conf"
	> $remote_ap_config
	while [ 1 ]; do
		line=$(sed -n "$line_num p" $supplicant_conf)
		if [ "$line" = "" -o "$line" = "}" ]; then
			break
		fi
		param=$(echo ${line%%=*} | sed 's/[[:space:]]//g')
		value=${line#*=}
		if [ "$param" = "ssid" -o "$param" = "psk" ]; then
			echo "$param=$value" >> $remote_ap_config
		else
			echo "$param=\"$value\"" >> $remote_ap_config
		fi
		line_num=$((line_num+1))
	done
	. $remote_ap_config
	return 0
}

sync_remote_ap() {
	# do nothing if 2.4G is not running on AP mode or the AP mode is fixed
	apmode=$(qweconfig get apmode.wlan1)
	if [ "$(qweconfig get mode.wlan1)" != "0" -o "$apmode" = "fixed" ]; then
		return 1
	fi

	# do nothing if 5G is not running on Station or Repeater mode
	if [ "$(call_qcsapi -u get_mode $qtn_sta_ifname)" != "Station" ]; then
		return 1
	fi

	if extract_5g_network; then
		# if 5G associate to remote AP, let 2.4G network be same as 5G network
		if [ "$apmode" = "append" ]; then
			append_string_len=${#APPEND_STRING}
			ssid_cut_len=$((32-append_string_len))
			ssid=$(echo $ssid | cut -c 0-$ssid_cut_len)$APPEND_STRING
		fi
		if [ "$key_mgmt" = "NONE" ]; then
			encryption="open"
		elif [ "$proto" = "WPA RSN" -o "$proto" = "WPA WPA2" ]; then
			encryption="mixed"
		elif [ "$proto" = "RSN" -o "$proto" = "WPA2" ] && [ "$key_mgmt" = "WPA-PSK" ]; then
			encryption="wpa2_aes"
		elif [ "$proto" = "RSN" -o "$proto" = "WPA2" ] && [ "$(echo $key_mgmt | grep WPA-PSK-SHA256)" != "" ]; then
			encryption="wpa2_aes"
		else
			echo "=== Error: unknowm proto=\"$proto\", key_mgmt=\"$key_mgmt\"" >&2
			return 1
		fi
		passphrase=$psk
	elif [ "$(qweconfig getrunning mode.wlan1)" = "0" ]; then
		# if 5G don't associate to remote AP, let 2.4G network keep as before
		ssid=$(qweconfig getrunning ssid.wlan1)
		encryption=$(qweconfig getrunning encryption.wlan1)
		passphrase=$(qweconfig getrunning passphrase.wlan1)
	else
		return 1
	fi

	if [ "$1" = "--compare-running" ]; then
		same_as_running=1
		if [ "$ssid" != "$(qweconfig getrunning ssid.wlan1)" ] ||
		   [ "$encryption" != "$(qweconfig getrunning encryption.wlan1)" ] ||
		   [ "$passphrase" != "$(qweconfig getrunning passphrase.wlan1)" ]; then
			same_as_running=0
		fi
		if [ $same_as_running = 1 ]; then
			return 1
		fi
	fi

	qweconfig setonce ssid.wlan1 "$ssid"
	qweconfig setonce encryption.wlan1 $encryption
	qweconfig setonce passphrase.wlan1 "$passphrase"

	return 0
}

if [ $# -lt 2 ]; then
	usage_and_exit
fi

if [ "$(ls /lib/wlan/wlan[0-9].sh 2>/dev/null)" = "" ]; then
	echo "This platform don't extend any wireless adapter" >&2
	exit 1
fi

if [ ! -f /lib/wlan/$1.sh ]; then
	for wlan in $(ls /lib/wlan/wlan[0-9].sh 2>/dev/null); do
		wlan=$(basename $wlan | sed 's/.sh//g')
		all_qwe_wlan="$all_qwe_wlan $wlan"
	done
	echo "Don't find device $1, available device: $all_qwe_wlan" >&2
	exit 1
fi

if [ "$qwe_active_adpt" != "" ]; then
	. /lib/wlan/$qwe_active_adpt.sh
else
	. /lib/wlan/$1.sh
fi

case $2 in
    load_driver) load_driver ;;
    unload_driver) unload_driver ;;
    down) wlandown; sync_wps_band; update_pm_state ;;
    up) sync_remote_ap; wlanup; qweconfig backuprunning; sync_wps_band ;;
    commit) sync_remote_ap; commit; qweconfig backuprunning; sync_wps_band ;;
    scan) scan ;;
    wps) check_wps_argv $@; wps $3 ;;
    list) check_list_argv $@; list $3 ;;
    stainfo) check_stainfo_argv $@; stainfo $3 ;;
    status) check_status_argv $@; status $3 ;;
    stats) check_stats_argv $@; stats $3 ;;
    showhwaddr) check_showhwaddr_argv $@; showhwaddr $3 ;;
    setuuid) check_setuuid_argv $@; setuuid $3 ;;
    detect_hw) detect_hw ;;
    sync_remote_ap) sync_remote_ap --compare-running && { commit; qweconfig backuprunning; } ;;
    *) usage_and_exit ;;
esac
