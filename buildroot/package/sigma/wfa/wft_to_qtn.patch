diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/ca/Makefile Sigma_Sample_DUT_Code-Linux_v8.1.1/ca/Makefile
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/ca/Makefile	2015-02-27 14:26:48.003239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/ca/Makefile	2015-02-27 14:26:52.791239661 +0300
@@ -18,10 +18,7 @@
 
 PROGS = wfa_ca 
 
-all: ${PROGS}
-
-wfa_ca: wfa_ca.o
-	${CC} ${CFLAGS} -DDEBUG=1 -o $@ wfa_ca.o ${CALIBS}
+all: wfa_ca.o
 
 clean:
 	rm -f ${PROGS} ${CLEANFILES}
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/ca/wfa_ca.c Sigma_Sample_DUT_Code-Linux_v8.1.1/ca/wfa_ca.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/ca/wfa_ca.c	2015-02-27 14:26:48.003239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/ca/wfa_ca.c	2015-02-27 14:26:52.795239661 +0300
@@ -20,13 +20,15 @@
  *       This is the main program for Control Agent.
  */
 
-#include <stdio.h>      /* for printf() and fprintf() */
+#include <stdio.h>      /* for DPRINT_LOG() and fprintf() */
 #include <sys/socket.h> /* for socket(), connect(), send(), and recv() */
 #include <arpa/inet.h>  /* for sockaddr_in and inet_addr() */
 #include <stdlib.h>     /* for atoi() and exit() */
 #include <string.h>     /* for memset() */
 #include <unistd.h>     /* for close() */
 #include <sys/select.h>
+#include <ctype.h>
+
 
 #include "wfa_debug.h"
 #include "wfa_main.h"
@@ -46,20 +48,25 @@
 extern typeNameStr_t nameStr[];
 extern char gRespStr[];
 
-int gSock = -1, tmsockfd, gCaSockfd = -1, xcSockfd, btSockfd;
-int gtgSend, gtgRecv, gtgTransac;
+static int gSock = -1;
+int gCaSockfd = -1;
+int btSockfd;
+int gtgSend;
+int gtgRecv;
+int gtgTransac;
 char gnetIf[32] = "any";
 tgStream_t    *theStreams;
 long          itimeout = 0;
+extern typeNameStr_t qtn_capi_to_tlv[];
+extern void qtn_handle_dut_responce(unsigned tag, unsigned char* data);
 
 unsigned short wfa_defined_debug = WFA_DEBUG_ERR | WFA_DEBUG_WARNING | WFA_DEBUG_INFO;
-unsigned short dfd_lvl = WFA_DEBUG_DEFAULT | WFA_DEBUG_ERR | WFA_DEBUG_INFO;
 
 /*
  * the output format can be redefined for file output.
  */
 
-int main(int argc, char *argv[])
+int wfa_ca_main(int argc, char *argv[])
 {
     int nfds;
     struct sockaddr_in servAddr;
@@ -77,11 +84,13 @@
     BYTE pcmdBuf[WFA_BUFF_1K];
     char *pcmdStr = NULL;
     char respStr[WFA_BUFF_512];
+    int use_external_handlers = 0;
 
 	//start of CLI handling variables
 	char wfaCliBuff[128];
 	FILE *wfaCliFd;
 	char * cliCmd,*tempCmdBuff;
+
     if(argc < 3)
     {
         DPRINT_ERR(WFA_ERR, "Usage: %s <control interface> <local control agent port>\n", argv[0]);
@@ -90,7 +99,7 @@
 
     myport = atoi(argv[2]); 
 
-    //strcpy(gnetIf, argv[1]);
+    strcpy(gnetIf, argv[1]);
     if(argc > 3)
     {
         if(argc < 5)
@@ -199,6 +208,12 @@
         DPRINT_INFO(WFA_OUT, "new event \n");
         if(FD_ISSET(tmsockfd, &sockSet))
         {
+		if (gCaSockfd > 0) {
+        	        shutdown(gCaSockfd, SHUT_WR);
+                	close(gCaSockfd);
+	                gCaSockfd = -1;
+		}
+
             gCaSockfd = wfaAcceptTCPConn(tmsockfd);
             DPRINT_INFO(WFA_OUT, "accept new connection\n");
             continue;
@@ -230,9 +245,18 @@
             DPRINT_INFO(WFA_OUT, "message %s %i\n", xcCmdBuf, nbytes);
             slen = (int )strlen((char *)xcCmdBuf);
 
-            DPRINT_INFO(WFA_OUT, "last %x last-1  %x last-2 %x last-3 %x\n", cmdName[slen], cmdName[slen-1], cmdName[slen-2], cmdName[slen-3]);
-
-            xcCmdBuf[slen-3] = '\0';
+	    if (slen >= 2) {
+	    		while (slen > 0) {
+				if (isspace(xcCmdBuf[slen - 1])) {
+					xcCmdBuf[slen - 1] = 0;
+					slen--;
+				}
+				else {
+					break;
+				}
+	    		}
+        	    DPRINT_INFO(WFA_OUT, "last %x last-1  %x last-2 %x last-3 %x\n", xcCmdBuf[slen], xcCmdBuf[slen-1], xcCmdBuf[slen-2], xcCmdBuf[slen-3]);
+	    }
 
             if(gSock == -1)
             {
@@ -259,17 +283,24 @@
 			tempCmdBuff=(char* )malloc(sizeof(xcCmdBuf));
 			memcpy(tempCmdBuff,xcCmdBuf,sizeof(xcCmdBuf));
 		
+			if (strstr(tempCmdBuff, ",") == NULL) {
+				snprintf(cmdName, sizeof(cmdName), "%s", tempCmdBuff);
+			} else {
 			memcpy(cmdName, strtok_r((char *)tempCmdBuff, ",", (char **)&pcmdStr), 32);
-			printf("\nInside the CLI huck block \n");
+			}
+
+			cmdName[sizeof(cmdName) - 1] = '\0';
+
+			DPRINT_LOG("\nInside the CLI huck block \n");
 
 			wfaCliFd=fopen("/etc/WfaEndpoint/wfa_cli.txt","r");
-			printf("\nAfter File open \n");
+			DPRINT_LOG("\nAfter File open \n");
 			if(wfaCliFd!= NULL)
 			{
-				//printf("\nInside File open \n");
+				//DPRINT_LOG("\nInside File open \n");
 				while(fgets(wfaCliBuff, 128, wfaCliFd) != NULL)
 				{
-					//printf("Line read from CLI file : %s",wfaCliBuff);
+					//DPRINT_LOG("Line read from CLI file : %s",wfaCliBuff);
 					if(ferror(wfaCliFd))
 						break;
 					cliCmd=strtok(wfaCliBuff,"-");
@@ -283,16 +314,33 @@
 				fclose(wfaCliFd);
 
 			}
-			printf("\nOutside the new block \n");
+			DPRINT_LOG("\nOutside the new block \n");
 			free(tempCmdBuff);
-			if(strcmp(cmdName,"wfa_cli_cmd") != 0)
-	            memcpy(cmdName, strtok_r((char *)xcCmdBuf, ",", (char **)&pcmdStr), 32);
+			if(strcmp(cmdName,"wfa_cli_cmd") != 0) {
+				char* cmd = strtok_r((char *)xcCmdBuf, ",", (char **)&pcmdStr);
+				if (cmd) {
+			            memcpy(cmdName, cmd, 32);
+				} else {
+					cmdName[0] = '\0';
+				}
+			}
 
 			
 			i = 0;
-            while(nameStr[i].type != -1)
+			use_external_handlers = 0;
+			for (i = 0; qtn_capi_to_tlv[i].type != -1; ++i) {
+				if(strcasecmp(qtn_capi_to_tlv[i].name, cmdName) == 0) {
+				    isFound = 1;
+				    use_external_handlers = 1;
+				    break;
+				}
+			}
+
+		if (!isFound) i = 0;
+
+            while(!isFound && nameStr[i].type != -1)
             {
-                if(strcmp(nameStr[i].name, cmdName) == 0)
+                if(strcasecmp(nameStr[i].name, cmdName) == 0)
                 {
                     isFound = 1;
                     break;
@@ -312,7 +360,11 @@
             }
 
             memset(pcmdBuf, 0, WFA_BUFF_1K); 
-            if(nameStr[i].cmdProcFunc(pcmdStr, pcmdBuf, &cmdLen)==WFA_FAILURE)
+	    int handle_result = use_external_handlers
+	    	? qtn_capi_to_tlv[i].cmdProcFunc(pcmdStr, pcmdBuf, &cmdLen)
+	    	: nameStr[i].cmdProcFunc(pcmdStr, pcmdBuf, &cmdLen);
+
+            if(handle_result==WFA_FAILURE)
             {
                 sleep(1);
                 sprintf(respStr, "status,INVALID\r\n");
@@ -348,15 +400,19 @@
 
 #if DEBUG 
             for(i = 0; i< bytesRcvd; i++)
-               printf("%x ", caCmdBuf[i]);
-               printf("\n");
+               DPRINT_LOG("%x ", caCmdBuf[i]);
+               DPRINT_LOG("\n");
 #endif
             tag = ((wfaTLV *)caCmdBuf)->tag;     
           
             memcpy(&ret_status, caCmdBuf+4, 4);
 
-            DPRINT_INFO(WFA_OUT, "tag %i \n", tag);
-            if(tag != 0 && wfaCmdRespProcFuncTbl[tag] != NULL)
+            DPRINT_INFO(WFA_OUT, "tag %i bytesRcvd %d\n", tag, bytesRcvd);
+	    if (use_external_handlers)
+	    {
+	    	qtn_handle_dut_responce(tag, caCmdBuf);
+	    }
+            else if(tag != 0 && wfaCmdRespProcFuncTbl[tag] != NULL)
             {
                 wfaCmdRespProcFuncTbl[tag](caCmdBuf);
             }
@@ -367,5 +423,12 @@
     } /* for */
 
     close(gSock);
-    exit(0);
+    return 0;
 }
+
+#ifdef ENABLE_MAIN
+int main(int argc, char *argv[])
+{
+	return wfa_ca_main(argc, argv);
+}
+#endif
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/dut/Makefile Sigma_Sample_DUT_Code-Linux_v8.1.1/dut/Makefile
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/dut/Makefile	2015-02-27 14:26:47.987239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/dut/Makefile	2015-02-27 14:26:52.795239661 +0300
@@ -16,15 +16,10 @@
 
 include ../Makefile.inc
 
-PROGS = wfa_dut wfa_dut_init.o
+PROGS = wfa_dut.o wfa_dut_init.o
 #PROGS = wfa_dut
 
 all: ${PROGS}
 
-wfa_dut_init.o : wfa_dut_init.c
-
-wfa_dut: wfa_dut.o wfa_dut_init.o ../lib/libwfa_dut.a 
-	${CC} ${CFLAGS} -o $@ wfa_dut.o wfa_dut_init.o ${DUTLIBS}
-
 clean:
 	rm -f ${PROGS} ${CLEANFILES}
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/dut/wfa_dut.c Sigma_Sample_DUT_Code-Linux_v8.1.1/dut/wfa_dut.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/dut/wfa_dut.c	2015-02-27 14:26:47.987239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/dut/wfa_dut.c	2015-02-27 14:26:52.795239661 +0300
@@ -102,9 +102,10 @@
 
 extern int wfa_estimate_timer_latency();
 extern void wfa_dut_init(BYTE **tBuf, BYTE **rBuf, BYTE **paBuf, BYTE **cBuf, struct timeval **timerp);
+void qtn_handle_dut_req(int xcCmdTag, int len, unsigned char *params, int *respLen, BYTE *respBuf);
 
 int
-main(int argc, char **argv)
+wfa_dut_main(int argc, char **argv)
 {
     int	      nfds, maxfdn1 = -1, nbytes = 0, cmdLen = 0, isExit = 1;
     int       respLen;
@@ -144,7 +145,7 @@
         {
             DPRINT_ERR(WFA_ERR, "Cant open the log file continuing without redirecting\n");
         }
-        printf("Output starts\n");
+        DPRINT_LOG("Output starts\n");
     }
 #endif
 
@@ -168,9 +169,9 @@
 
     if(adj_latency > 500000)
     {
-        printf("****************** WARNING  **********************\n");
-        printf("!!!THE SLEEP TIMER LATENCY IS TOO HIGH!!!!!!!!!!!!\n");
-        printf("**************************************************\n");
+        DPRINT_LOG("****************** WARNING  **********************\n");
+        DPRINT_LOG("!!!THE SLEEP TIMER LATENCY IS TOO HIGH!!!!!!!!!!!!\n");
+        DPRINT_LOG("**************************************************\n");
 
         /* Just set it to  500 mini seconds */
         adj_latency = 500000;
@@ -300,7 +301,11 @@
                memset(&gGenericResp, 0, sizeof(dutCmdResponse_t));
 
                /* command process function defined in wfa_ca.c and wfa_tg.c */
-               if(xcCmdTag != 0 && gWfaCmdFuncTbl[xcCmdTag] != NULL)
+	       if (xcCmdTag >= WFA_STA_COMMANDS_END)
+	       {
+	       		qtn_handle_dut_req(xcCmdTag, cmdLen, parmsVal, &respLen, (BYTE *)respBuf);
+	       }
+               else if(xcCmdTag != 0 && gWfaCmdFuncTbl[xcCmdTag] != NULL)
                {
 	           /* since the new commands are expanded to new block */
 		           gWfaCmdFuncTbl[xcCmdTag](cmdLen, parmsVal, &respLen, (BYTE *)respBuf);
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_debug.h Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_debug.h
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_debug.h	2015-02-27 14:26:47.987239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_debug.h	2015-02-27 14:26:52.799239661 +0300
@@ -20,6 +20,8 @@
 #ifndef WFA_DEBUG_H
 #define WFA_DEBUG_H
 
+#include <syslog.h>
+
 #define WFA_ERR         stderr  /* error: can be redefined to a log file */
 #define WFA_OUT         stdout  /* info:  can be redefined to a log file */
 #define WFA_WNG         stdout  /* warning: can be redefined to a log file */
@@ -31,14 +33,22 @@
 
 #define WFA_DEBUG 1
 
-#define DPRINT_ERR      fprintf(WFA_ERR, "File %s, Line %ld: ", \
-                               __FILE__, (long)__LINE__); \
-                        fprintf 
-
-#define DPRINT_INFO     if(wfa_defined_debug & WFA_DEBUG_INFO) \
-                            fprintf
+#define DPRINT_ERR(dest, frm, args...) \
+	do { \
+		syslog(LOG_ERR, "%s:%d " frm, __FILE__, __LINE__, ##args); \
+	} while (0)
+
+#define DPRINT_WARNING(dest, frm, args...) \
+	do { \
+		syslog(LOG_WARNING, "%s:%d " frm, __FILE__, __LINE__, ##args); \
+	} while (0)
+
+#define DPRINT_INFO(dest, frm, args...) \
+	do { \
+		syslog(LOG_INFO, "%s:%d " frm, __FILE__, __LINE__, ##args); \
+	} while (0)
 
-#define DPRINT_WARNING  if(wfa_defined_debug & WFA_DEBUG_WARNING) \
-                            fprintf
+#define DPRINT_LOG(frm, args...) \
+	syslog(LOG_INFO, frm, ##args)
 
 #endif
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_portall.h Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_portall.h
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_portall.h	2015-02-27 14:26:47.983239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_portall.h	2015-02-27 14:26:52.799239661 +0300
@@ -57,7 +57,7 @@
                            listen(sock, maxnumpending)
 
 #define wBZERO(ap, memsize) \
-                           bzero(ap, memsize)
+                           (memset((ap), '\0', (memsize)), (void) 0)
 
 #define wCONNECT(sock, peeraddr, sizeaddr) \
                            connect(sock, peeraddr, sizeaddr)
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_tlv.h Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_tlv.h
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_tlv.h	2015-02-27 14:26:47.987239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_tlv.h	2015-02-27 14:26:52.803239661 +0300
@@ -243,7 +243,7 @@
 #define WFA_TLV_HEAD_LEN 1+2
 
 extern WORD wfaGetTag(BYTE *tlv_data);
-extern void wfaSetTag(BYTE *tlv_data, BYTE new_tag);
+extern BOOL wfaSetTLVTag(WORD new_tag, BYTE *tlv_data);
 extern WORD wfaGetTLVLen(BYTE *tlv_data);
 extern WORD wfaGetValueLen(BYTE *tlv_data);
 extern BOOL wfaGetValue(BYTE *pstr, int value_len, BYTE *tlv_data);
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_types.h Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_types.h
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/inc/wfa_types.h	2015-02-27 14:26:47.987239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/inc/wfa_types.h	2015-02-27 14:26:52.803239661 +0300
@@ -65,11 +65,16 @@
 
 typedef int BOOL;
 
+/*
 #ifndef    TRUE
-    #define    FALSE       -1
-    #define    TRUE        0
-    #define    DONE        1
+    #define    FALSE     -1
+    #define    TRUE       0
+    #define    DONE       1
 #endif
+*/
+
+/* still bad, but better than before */
+enum {DONE = 1};
 
 typedef enum returnTypes
 {
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_ca_resp.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_ca_resp.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_ca_resp.c	2015-02-27 14:26:47.999239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_ca_resp.c	2015-02-27 14:26:52.807239661 +0300
@@ -137,7 +137,7 @@
 
 };
 
-extern int gSock, gCaSockfd;
+extern int gCaSockfd;
 
 int caCmdNotDefinedYet(BYTE *cmdBuf)
 {
@@ -333,7 +333,7 @@
     DPRINT_INFO(WFA_OUT, "Entering wfaTrafficAgentSendResp ...\n");
 
     numStreams = (len/sizeof(dutCmdResponse_t));
-    printf("total %i streams\n", numStreams);
+    DPRINT_LOG("total %i streams\n", numStreams);
     for(i=0; i<numStreams; i++) 
     {
    	if(statResp->status != STATUS_COMPLETE) 
@@ -355,7 +355,7 @@
      	    strncat(gRespStr, copyBuf, sizeof(copyBuf)-1);
    	}
 
-        printf("streamids %s\n", gRespStr);
+        DPRINT_LOG("streamids %s\n", gRespStr);
 
    	strncat(gRespStr, ",txFrames,", 10);
    	for(i=0; i<numStreams; i++) 
@@ -391,7 +391,7 @@
 	    strncat(gRespStr, copyBuf, sizeof(copyBuf)-1);
         }
 
-	printf("jitter %lu\n", statResp[i].cmdru.stats.jitter);
+	DPRINT_LOG("jitter %lu\n", statResp[i].cmdru.stats.jitter);
         strncat(gRespStr, "\r\n", 4);
     }
 
@@ -470,7 +470,7 @@
     }
 		
     wfaCtrlSend(gCaSockfd, (BYTE *)gRespStr, strlen(gRespStr));
-    printf("gRespStr = %s", gRespStr);
+    DPRINT_LOG("gRespStr = %s", gRespStr);
     return done;
 }
 
@@ -547,17 +547,17 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,mac,%s\r\n", getmacResp->cmdru.mac);
-        printf("status,COMPLETE,mac,%s\r\n", getmacResp->cmdru.mac);
+        DPRINT_LOG("status,COMPLETE,mac,%s\r\n", getmacResp->cmdru.mac);
         break;
 
         case STATUS_ERROR:
-        printf("status,ERROR\n");
+        DPRINT_LOG("status,ERROR\n");
         sprintf(gRespStr, "status,COMPLETE,mac,00:00:00:00:00:00\r\n");
         break;
 
         default:
         sprintf(gRespStr, "status,COMPLETE,mac,00:00:00:00:00:00\r\n");
-        printf("unknown status\n");
+        DPRINT_LOG("unknown status\n");
     }
 
     wfaCtrlSend(gCaSockfd, (BYTE *)gRespStr, strlen(gRespStr));
@@ -580,15 +580,15 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,bssid,%s\r\n", getBssidResp->cmdru.bssid);
-        printf("status,COMPLETE,bssid,%s\r\n", getBssidResp->cmdru.bssid);
+        DPRINT_LOG("status,COMPLETE,bssid,%s\r\n", getBssidResp->cmdru.bssid);
         break;
         case STATUS_ERROR:
-        printf("status,ERROR\n");
+        DPRINT_LOG("status,ERROR\n");
         sprintf(gRespStr, "status,COMPLETE,mac,00:00:00:00:00:00\r\n");
         break;
         default:
         sprintf(gRespStr, "status,COMPLETE,mac,00:00:00:00:00:00\r\n");
-        printf("unknown status\n");
+        DPRINT_LOG("unknown status\n");
     }
     wfaCtrlSend(gCaSockfd, (BYTE *)gRespStr, strlen(gRespStr));
 
@@ -610,13 +610,13 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,bssid,%s\r\n", getBssidResp->cmdru.bssid);
-        printf("status,COMPLETE,bssid,%s\r\n", getBssidResp->cmdru.bssid);
+        DPRINT_LOG("status,COMPLETE,bssid,%s\r\n", getBssidResp->cmdru.bssid);
         DPRINT_INFO(WFA_OUT, " %s\n", gRespStr);
         break;
 
         case STATUS_ERROR:
         sprintf(gRespStr, "status,ERROR\r\n");
-        printf("status,ERROR\r\n");
+        DPRINT_LOG("status,ERROR\r\n");
         break;
 
         default:
@@ -794,7 +794,7 @@
 
         case STATUS_ERROR:
         sprintf(gRespStr, "status,ERROR\r\n");
-        printf("status,COMPLETE\r\n");
+        DPRINT_LOG("status,COMPLETE\r\n");
         DPRINT_INFO(WFA_OUT, " %s\n", gRespStr);
         break;
     }
@@ -811,11 +811,11 @@
 
     DPRINT_INFO(WFA_OUT, "Entering wfaStaGetP2pDevAddressResp ...\n");
 
-   printf("Inside response function...");
-   printf("Inside response function...");
-   printf("Inside response function...");
-   printf("Inside response function...");
-   printf("Inside response function...");
+   DPRINT_LOG("Inside response function...");
+   DPRINT_LOG("Inside response function...");
+   DPRINT_LOG("Inside response function...");
+   DPRINT_LOG("Inside response function...");
+   DPRINT_LOG("Inside response function...");
 
     switch(p2pDevAddResp->status)
     {
@@ -826,7 +826,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,devid,%s\r\n", p2pDevAddResp->cmdru.devid);
-        printf("status,COMPLETE,devid,%s\r\n", p2pDevAddResp->cmdru.devid);
+        DPRINT_LOG("status,COMPLETE,devid,%s\r\n", p2pDevAddResp->cmdru.devid);
         break;
 
         default:
@@ -853,7 +853,7 @@
 
         case STATUS_COMPLETE:
 		sprintf(gRespStr, "status,COMPLETE,groupid,%s\r\n", p2pResp->cmdru.grpid);
-		printf("status,COMPLETE,groupid,%s\r\n", p2pResp->cmdru.grpid);
+		DPRINT_LOG("status,COMPLETE,groupid,%s\r\n", p2pResp->cmdru.grpid);
         DPRINT_INFO(WFA_OUT, " %s\n", gRespStr);		
         break;
 
@@ -882,7 +882,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,result,%s,groupid,%s\r\n", grpInfo->result,grpInfo->grpId);
-        printf("status,COMPLETE,result,%s,groupid,%s\r\n", grpInfo->result,grpInfo->grpId);
+        DPRINT_LOG("status,COMPLETE,result,%s,groupid,%s\r\n", grpInfo->result,grpInfo->grpId);
         break;
 
         default:
@@ -910,7 +910,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,pin,%s\r\n", p2pResp->cmdru.wpsPin);
-        printf("status,COMPLETE,pin,%s\r\n", p2pResp->cmdru.wpsPin);
+        DPRINT_LOG("status,COMPLETE,pin,%s\r\n", p2pResp->cmdru.wpsPin);
         break;
 
         default:
@@ -938,7 +938,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,passphrase,%s,ssid,%s\r\n", pskInfo->passPhrase,pskInfo->ssid);
-        printf("status,COMPLETE,passphrase,%s,ssid,%s\r\n", pskInfo->passPhrase,pskInfo->ssid);
+        DPRINT_LOG("status,COMPLETE,passphrase,%s,ssid,%s\r\n", pskInfo->passPhrase,pskInfo->ssid);
         break;
 
         default:
@@ -965,7 +965,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,label,%s\r\n", p2pResp->cmdru.wpsPin);
-        printf("status,COMPLETE,label,%s\r\n", p2pResp->cmdru.wpsPin);
+        DPRINT_LOG("status,COMPLETE,label,%s\r\n", p2pResp->cmdru.wpsPin);
         break;
 
         default:
@@ -1031,13 +1031,13 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE\r\n");
-        printf("status,COMPLETE\r\n");
+        DPRINT_LOG("status,COMPLETE\r\n");
         DPRINT_INFO(WFA_OUT, " %s\n", gRespStr);
         break;
 
         case STATUS_ERROR:
         sprintf(gRespStr, "status,ERROR\r\n");
-        printf("status,COMPLETE\r\n");
+        DPRINT_LOG("status,COMPLETE\r\n");
         DPRINT_INFO(WFA_OUT, " %s\n", gRespStr);
         break;
 
@@ -1067,7 +1067,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,result,%s,groupid,%s,wfdsessionid,%s\r\n", wfdConnInfo->result,wfdConnInfo->p2pGrpId,wfdConnInfo->wfdSessionId);
-        printf("status,COMPLETE,result,%s,groupid,%s,wfdsessionid,%s\r\n", wfdConnInfo->result,wfdConnInfo->p2pGrpId,wfdConnInfo->wfdSessionId);
+        DPRINT_LOG("status,COMPLETE,result,%s,groupid,%s,wfdsessionid,%s\r\n", wfdConnInfo->result,wfdConnInfo->p2pGrpId,wfdConnInfo->wfdSessionId);
         break;
 
         default:
@@ -1098,19 +1098,19 @@
 		if(staCliCmdResp->resFlag == 1)
 		{
 			sprintf(gRespStr, "status,COMPLETE,%s\r\n", staCliCmdResp->result);
-			printf("\nstatus,COMPLETE,%s****\r\n", staCliCmdResp->result);
+			DPRINT_LOG("\nstatus,COMPLETE,%s****\r\n", staCliCmdResp->result);
 		}
 		else
 		{
 			sprintf(gRespStr, "status,COMPLETE\r\n");
-			printf("status,COMPLETE\r\n");
+			DPRINT_LOG("status,COMPLETE\r\n");
 		}
 
         break;
 
         case STATUS_ERROR:
         sprintf(gRespStr, "status,ERROR\r\n");
-        printf("status,ERROR\r\n");
+        DPRINT_LOG("status,ERROR\r\n");
         DPRINT_INFO(WFA_OUT, " %s\n", gRespStr);
         break;
 
@@ -1141,7 +1141,7 @@
 
         case STATUS_COMPLETE:
         sprintf(gRespStr, "status,COMPLETE,wfdsessionid,%s\r\n",wfdConnInfo->wfdSessionId);
-        printf("status,COMPLETE,wfdsessionid,%s\r\n", wfdConnInfo->wfdSessionId);
+        DPRINT_LOG("status,COMPLETE,wfdsessionid,%s\r\n", wfdConnInfo->wfdSessionId);
         break;
 
         default:
@@ -1174,13 +1174,13 @@
 		if(getParamInfo->getParamType == eDiscoveredDevList)
 		{
 	        sprintf(gRespStr, "status,COMPLETE,DeviceList,%s\r\n",getParamInfo->devList);
-	        printf("status,COMPLETE,DeviceList,%s\r\n", getParamInfo->devList);
+	        DPRINT_LOG("status,COMPLETE,DeviceList,%s\r\n", getParamInfo->devList);
 	        break;		
 		}
 		else
 		{
 	        sprintf(gRespStr, "status,COMPLETE,UnkownGetParmResp\r\n");
-	        printf("status,COMPLETE,UnkownGetParmResp\r\n");
+	        DPRINT_LOG("status,COMPLETE,UnkownGetParmResp\r\n");
 	        break;		
 		}
 
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_cmdproc.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_cmdproc.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_cmdproc.c	2015-02-27 14:26:48.003239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_cmdproc.c	2015-02-27 14:28:36.036477210 +0300
@@ -36,7 +36,6 @@
 #include "wfa_miscs.h"
 #include "wfa_agtctrl.h"
 
-extern int gSock;
 extern void printProfile(tgProfile_t *);
 int wfaStandardBoolParsing (char *str);
 
@@ -85,7 +84,7 @@
  */
 int cmdProcNotDefinedYet(char *pcmdStr, char *buf, int *len)
 {
-    printf("The command processing function not defined.\n");
+    DPRINT_LOG("The command processing function not defined.\n");
 
     /* need to send back a response */
 
@@ -180,7 +179,7 @@
                   pf->direction = DIRECT_RECV;
               }
               else
-                  printf("Don't know direction\n");
+                  DPRINT_LOG("Don't know direction\n");
 
               DPRINT_INFO(WFA_OUT, "direction %i\n", pf->direction);
               kwcnt++;
@@ -421,7 +420,7 @@
 #if 0
     if(kwcnt < 8)
     {
-       printf("Incorrect command, missing parameters\n");
+       DPRINT_LOG("Incorrect command, missing parameters\n");
        return WFA_FAILURE;
     }
 #endif
@@ -480,12 +479,12 @@
         if(sid == NULL)
            break;
 
-        printf("sid %s\n", sid);
+        DPRINT_LOG("sid %s\n", sid);
         if(isNumber(sid) == WFA_FAILURE)
            continue;
 
         strid = atoi(sid);
-        printf("id %i\n", strid);
+        DPRINT_LOG("id %i\n", strid);
         id_cnt++; 
 
         memcpy(aBuf+4*id_cnt, (char *)&strid, 4);
@@ -500,9 +499,9 @@
      {
               int i;
               for(i = 0; i< *aLen; i++)
-                 printf("%x ", aBuf[i]);
+                 DPRINT_LOG("%x ", aBuf[i]);
 
-              printf("\n");
+              DPRINT_LOG("\n");
      }
 #endif
 
@@ -598,9 +597,9 @@
      {
               int i;
               for(i = 0; i< *aLen; i++)
-                 printf("%x ", aBuf[i]);
+                 DPRINT_LOG("%x ", aBuf[i]);
 
-              printf("\n");
+              DPRINT_LOG("\n");
      }
 #endif
     return WFA_SUCCESS;
@@ -1015,7 +1014,7 @@
             str = strtok_r(NULL, ",", &pcmdStr);
             strcpy(verifyip->intf, str);
             verifyip->intf[15]='\0';
-            DPRINT_INFO(WFA_OUT, "interface %s %i\n", verifyip->intf, strlen(verifyip->intf));
+            DPRINT_INFO(WFA_OUT, "interface %s %i\n", verifyip->intf, (int)strlen(verifyip->intf));
         }
         else if(strcasecmp(str, "destination") == 0)
         {
@@ -1794,7 +1793,7 @@
     if(aBuf == NULL)
         return WFA_FAILURE;
    
-    printf("entering device get info\n");
+    DPRINT_LOG("entering device get info\n");
     memset(aBuf, 0, *aLen);
 
     dinfo->fw = 0;
@@ -2006,9 +2005,9 @@
 
 #if DEBUG 
                for(i = 0; i< len; i++)
-                 printf("%x ", buf[i]);
+                 DPRINT_LOG("%x ", buf[i]);
 
-               printf("\n");
+               DPRINT_LOG("\n");
 #endif
 
     return WFA_SUCCESS;
@@ -2128,19 +2127,19 @@
         else if(strcasecmp(str, "enable") == 0)
         {
             str = strtok_r(NULL, ",", &pcmdStr);
-            printf("enable %i\n", atoi(str));
+            DPRINT_LOG("enable %i\n", atoi(str));
             switch(atoi(str)) /* enable */
             {
             case 1:
                debugSet->cmdsu.dbg.state = 1;
-               printf("enable\n");
+               DPRINT_LOG("enable\n");
                break;
             case 0:
                debugSet->cmdsu.dbg.state = 0;
-               printf("disable\n");
+               DPRINT_LOG("disable\n");
                break;
             default:
-               printf("wrong\n");
+               DPRINT_LOG("wrong\n");
                return WFA_FAILURE;  /* command invalid */
             }
          }
@@ -2222,7 +2221,7 @@
         else if(strcasecmp(str, "mode") == 0)
         {
             str = strtok_r(NULL, ",", &pcmdStr);
-            printf("\r\n mode is %s\n",str);
+            DPRINT_LOG("\r\n mode is %s\n",str);
             if(strcasecmp(str, "adhoc") == 0)
                setmode->mode = 1;
             else
@@ -2236,7 +2235,7 @@
         else
         {
             DPRINT_INFO(WFA_WNG, "Incorrect Command, check syntax\n");
-            printf("\r\n mode is %s\n",str);
+            DPRINT_LOG("\r\n mode is %s\n",str);
         }
     }
 
@@ -2252,7 +2251,7 @@
     char *str;
    
     if(aBuf == NULL)
-       return FALSE;
+       return WFA_ERROR;
    
     memset(aBuf, 0, *aLen);
 
@@ -2274,7 +2273,7 @@
 
     *aLen = 4+sizeof(dutCommand_t);
 
-    return TRUE;
+    return WFA_SUCCESS;
 }
 
 int xcCmdProcStaSetP2p(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2283,7 +2282,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2407,7 +2406,7 @@
          staSetP2p->discover_type_flag= 1;
 
          str = strtok_r(NULL, ",", &pcmdStr);
-         printf("DiscoverType is %s\n", str);
+         DPRINT_LOG("DiscoverType is %s\n", str);
          if(strcasecmp(str, "WFD") == 0)
             staSetP2p->discoverType= 1;
          else if (strcasecmp(str, "P2P") == 0)
@@ -2421,7 +2420,7 @@
 
    *aLen = 4+sizeof(caStaSetP2p_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2431,7 +2430,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2465,7 +2464,7 @@
 
    *aLen = 4+sizeof(caStaP2pConnect_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2476,7 +2475,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2527,7 +2526,7 @@
 
    *aLen = 4+sizeof(caStaP2pStartGrpForm_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaP2pDissolve(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2536,7 +2535,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2564,7 +2563,7 @@
 
    *aLen = 4+sizeof(caStaP2pDissolve_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaSendP2pInvReq(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2573,7 +2572,7 @@
    char *str;
 
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2612,7 +2611,7 @@
 
    *aLen = 4+sizeof(caStaSendP2pInvReq_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaAcceptP2pInvReq(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2622,7 +2621,7 @@
    char *str;
  
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2661,7 +2660,7 @@
 
    *aLen = 4+sizeof(caStaAcceptP2pInvReq_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2672,7 +2671,7 @@
    char *str;
 
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2705,7 +2704,7 @@
 
    *aLen = 4+sizeof(caStaSendP2pProvDisReq_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaSetWpsPbc(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2714,7 +2713,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2743,7 +2742,7 @@
 
    *aLen = 4+sizeof(caStaSetWpsPbc_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaWpsReadPin(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2752,7 +2751,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2781,7 +2780,7 @@
 
    *aLen = 4+sizeof(caStaWpsReadPin_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2791,7 +2790,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2820,7 +2819,7 @@
 
    *aLen = 4+sizeof(caStaWpsReadLabel_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2830,7 +2829,7 @@
    char *str;
  
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2865,7 +2864,7 @@
 
    *aLen = 4+sizeof(caStaWpsEnterPin_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaGetPsk(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2874,7 +2873,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2902,7 +2901,7 @@
 
    *aLen = 4+sizeof(caStaGetPsk_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaP2pStartAutoGo(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -2911,7 +2910,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2951,7 +2950,7 @@
 
    *aLen = 4+sizeof(caStaStartAutoGo_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2961,7 +2960,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -2983,7 +2982,7 @@
 
    *aLen = 4+sizeof(dutCommand_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -2994,7 +2993,7 @@
    char *str;
 
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3022,7 +3021,7 @@
 
    *aLen = 4+sizeof(caStaGetP2pIpConfig_t);
 
-    return TRUE;
+    return WFA_SUCCESS;
 }
 
 int xcCmdProcStaSendServiceDiscoveryReq(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -3031,7 +3030,7 @@
    char *str;
 
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3059,7 +3058,7 @@
 
    *aLen = 4+sizeof(caStaSendServiceDiscoveryReq_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaSendP2pPresenceReq(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -3068,7 +3067,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3100,7 +3099,7 @@
 
    *aLen = 4+sizeof(caStaSendP2pPresenceReq_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -3110,7 +3109,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3138,7 +3137,7 @@
 
    *aLen = 4+sizeof(caStaSetSleep_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 
@@ -3148,7 +3147,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3181,7 +3180,7 @@
 
    *aLen = 4+sizeof(caStaSetOpprPs_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 int xcCmdProcStaAddARPTableEntry(char *pcmdStr, BYTE *aBuf, int *aLen)
 {
@@ -3189,7 +3188,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3221,7 +3220,7 @@
 
    *aLen = 4+sizeof(caStaAddARPTableEntry_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 int xcCmdProcStaBlockICMPResponse(char *pcmdStr, BYTE *aBuf, int *aLen)
 {
@@ -3229,7 +3228,7 @@
    char *str;
    
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
    
    memset(aBuf, 0, *aLen);
 
@@ -3261,7 +3260,7 @@
 
    *aLen = 4+sizeof(caStaBlockICMPResponse_t);
 
-   return TRUE;
+   return WFA_SUCCESS;
 }
 
 int xcCmdProcStaSetPwrSave(char *pcmdStr, BYTE *aBuf, int *aLen)
@@ -3554,7 +3553,7 @@
         }
     }
     if(setwmm->action == WMMAC_ADDTS)
-       printf("ADDTS AC PARAMS: dialog id: %d, TID: %d, DIRECTION: %d, PSB: %d, UP: %d, INFOACK: %d BURST SIZE DEFN: %d\
+       DPRINT_LOG("ADDTS AC PARAMS: dialog id: %d, TID: %d, DIRECTION: %d, PSB: %d, UP: %d, INFOACK: %d BURST SIZE DEFN: %d\
  Fixed %d, MSDU Size: %d, Max MSDU Size %d, MIN SERVICE INTERVAL: %d, MAX SERVICE INTERVAL: %d\
         ,INACTIVITY: %d,SUSPENSION %d,SERVICE START TIME: %d,MIN DATARATE: %d,MEAN DATA RATE: %d\
         , PEAK DATA RATE: %d,BURSTSIZE or MSDU Aggreg: %d,DELAY BOUND: %d,PHYRATE: %d, SPLUSBW: %f,MEDIUM TIME: %d, ACCESSCAT: %d\n"\
@@ -3569,7 +3568,7 @@
          setwmm->actions.addts.tspec.delaybound,setwmm->actions.addts.tspec.PHYrate,setwmm->actions.addts.tspec.sba,\
  setwmm->actions.addts.tspec.medium_time,setwmm->actions.addts.accesscat);
     else
- printf("DELTS AC PARAMS: TID:  %d\n", setwmm->actions.delts);
+ DPRINT_LOG("DELTS AC PARAMS: TID:  %d\n", setwmm->actions.delts);
 
     hdr->tag =  WFA_STA_SET_WMM_TLV;   
     hdr->len = sizeof(caStaSetWMM_t);
@@ -3878,13 +3877,13 @@
     dutCommand_t *getInfo = (dutCommand_t *) (aBuf+sizeof(wfaTLV));
 
     if(aBuf == NULL)
-        return FALSE;
+        return WFA_ERROR;
    
     memset(aBuf, 0, *aLen);
 
     str = strtok_r(NULL, ",", &pcmdStr);
     if(str == NULL || str[0] == '\0')
-         return FALSE;
+         return WFA_ERROR;
 
     if(strcasecmp(str, "interface") == 0)
     {
@@ -3897,7 +3896,7 @@
 
     *aLen = 4 + sizeof(dutCommand_t);
 
-    return TRUE;
+    return WFA_SUCCESS;
 }
 int xcCmdProcStaDevSendFrame(char *pcmdStr, BYTE *aBuf, int *aLen)
 {
@@ -4304,11 +4303,11 @@
                         char *tstr1,*tstr2;
                         wfd->capReNego_flag= 1;
                         str = strtok_r(NULL, ",", &pcmdStr);
-                        printf("\n The Video format is : %s",str);
+                        DPRINT_LOG("\n The Video format is : %s",str);
                         tstr1 = strtok_r(str, "-", &str);
                         tstr2 = strtok_r(str, "-", &str);
                         temp1 = atoi(tstr2);
-                        printf("\n The Video format is : %s****%d*****",tstr1,temp1);
+                        DPRINT_LOG("\n The Video format is : %s****%d*****",tstr1,temp1);
 
                         if(strcasecmp(tstr1, "cea") == 0)
                         {
@@ -4380,7 +4379,7 @@
         else if(strcasecmp(str, "mode") == 0)
         {
            str = strtok_r(NULL, ",", &pcmdStr);
-           printf("modeis %s\n", str);
+           DPRINT_LOG("modeis %s\n", str);
 
            if(strcasecmp(str, "11b") == 0 || strcasecmp(str, "b") == 0)
               presetTestParams->wirelessMode = eModeB;
@@ -4400,12 +4399,12 @@
               presetTestParams->wirelessMode = eModeAC;
 
            presetTestParams->modeFlag = 1;
-           printf("\nSetting Mode as %d\n", presetTestParams->wirelessMode);
+           DPRINT_LOG("\nSetting Mode as %d\n", presetTestParams->wirelessMode);
         }
         else if(strcasecmp(str, "powersave") == 0)
         {
            str = strtok_r(NULL, ",", &pcmdStr);
-           printf("powersave is %s\n", str);
+           DPRINT_LOG("powersave is %s\n", str);
            if(strcasecmp(str, "on") == 0 || strcasecmp(str, "pspoll")==0)
               presetTestParams->legacyPowerSave = 1;
            else if (strcasecmp(str, "fast") == 0)
@@ -4416,13 +4415,13 @@
               presetTestParams->legacyPowerSave = 0;
 
            presetTestParams->psFlag = 1;
-           printf("\nSetting legacyPowerSave as %d\n", presetTestParams->legacyPowerSave);
+           DPRINT_LOG("\nSetting legacyPowerSave as %d\n", presetTestParams->legacyPowerSave);
         }
         else if(strcasecmp(str, "wmm") == 0)
         {
            presetTestParams->wmmFlag = 1;
            str = strtok_r(NULL, ",", &pcmdStr);
-           printf("wmm is %s\n", str);
+           DPRINT_LOG("wmm is %s\n", str);
 
            if(strcasecmp(str, "on") == 0)
               presetTestParams->wmmState = 1;
@@ -4491,7 +4490,7 @@
            if(strcasecmp(str, "11n") == 0)
            {
               presetTestParams->reset = eResetProg11n;
-              printf("reset to %s\n", str);
+              DPRINT_LOG("reset to %s\n", str);
            }
         }
         else if(strcasecmp(str, "ft_oa") == 0)
@@ -4500,7 +4499,7 @@
            if(strcasecmp(str, "Enable") == 0)
            {
               presetTestParams->ftoa = eEnable;
-              printf("ft_oa enabled\n");
+              DPRINT_LOG("ft_oa enabled\n");
            }
            else
            {
@@ -4513,7 +4512,7 @@
            if(strcasecmp(str, "Enable") == 0)
            {
               presetTestParams->ftds = eEnable;
-              printf("ft_ds enabled\n");
+              DPRINT_LOG("ft_ds enabled\n");
            }
            else
            {
@@ -4526,7 +4525,7 @@
            if(strcasecmp(str, "Enable") == 0)
            {
               presetTestParams->activescan = eEnable;
-              printf("active scan enabled\n");
+              DPRINT_LOG("active scan enabled\n");
            }
            else
            {
@@ -4758,7 +4757,7 @@
                tstr2 = strtok_r(str, "-", &str);
 
                temp1 = atoi(tstr2);
-               printf("\n The Video format is : %s****%d*****",tstr1,temp1);
+               DPRINT_LOG("\n The Video format is : %s****%d*****",tstr1,temp1);
 
 
                if(strcasecmp(tstr1, "cea") == 0)
@@ -5028,7 +5027,7 @@
         }
         else if(strcasecmp(str, "type") == 0) // dut or sta
         {
-           str == strtok_r(NULL, ",", &pcmdStr);
+           str = strtok_r(NULL, ",", &pcmdStr);
            strncpy(reset->prog, str, 8);
         }
     }
@@ -5459,7 +5458,7 @@
     char *tmp_str;
 
     if(aBuf == NULL)
-        return FALSE;
+        return WFA_ERROR;
 
      memset(aBuf, 0, *aLen);
 
@@ -5524,12 +5523,12 @@
 int xcCmdProcStaCliCommand(char *pcmdStr, BYTE *aBuf, int *aLen)
 {
 
-    printf("\n The CA CLI command to DUT is : %s",pcmdStr);
-    printf("\n The CA CLI command to DUT Length : %d",strlen(pcmdStr));
+    DPRINT_LOG("\n The CA CLI command to DUT is : %s",pcmdStr);
+    DPRINT_LOG("\n The CA CLI command to DUT Length : %d", (int)strlen(pcmdStr));
     wfaEncodeTLV(WFA_STA_CLI_CMD_TLV, strlen(pcmdStr), (BYTE *)pcmdStr, aBuf);
 
     *aLen = 4+strlen(pcmdStr);
-    return TRUE;
+    return WFA_SUCCESS;
 
 }
 
@@ -5539,7 +5538,7 @@
     char *str;
 
     if(aBuf == NULL)
-       return FALSE;
+       return WFA_ERROR;
 
     memset(aBuf, 0, *aLen);
 
@@ -5583,7 +5582,7 @@
     caWfdStaGenEvent_t *pWfdEvent;
  
     if(aBuf == NULL)
-       return FALSE;
+       return WFA_ERROR;
 
     memset(aBuf, '\0', *aLen);
 
@@ -5733,7 +5732,7 @@
    char *str;
 
    if(aBuf == NULL)
-       return FALSE;
+       return WFA_ERROR;
 
    memset(aBuf, 0, *aLen);
 
@@ -5788,7 +5787,7 @@
    char *str;
 
    if(aBuf == NULL)
-      return FALSE;
+      return WFA_ERROR;
 
    memset(aBuf, 0, *aLen);
 
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_cs.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_cs.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_cs.c	2015-02-27 14:26:47.999239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_cs.c	2015-02-27 14:26:52.819239660 +0300
@@ -256,7 +256,7 @@
     * use 'wpa_cli' command to check the interface status
     * none, scanning or complete (wpa_supplicant specific)
     */
-   sprintf(gCmdStr, "/sbin/wpa_cli -i%s status | grep ^wpa_state= | cut -f2- -d= > /tmp/.isConnected", ifname);
+   sprintf(gCmdStr, "wpa_cli -i%s status | grep ^wpa_state= | cut -f2- -d= > /tmp/.isConnected", ifname);
    sret = system(gCmdStr);
 
    /*
@@ -461,13 +461,13 @@
     * Use command 'ifconfig' to configure the interface ip address, mask.
     * (Linux specific).
     */
-   sprintf(gCmdStr, "/sbin/ifconfig %s %s netmask %s > /dev/null 2>&1 ", ipconfig->intf, ipconfig->ipaddr, ipconfig->mask);
+   sprintf(gCmdStr, "ifconfig %s %s netmask %s > /dev/null 2>&1 ", ipconfig->intf, ipconfig->ipaddr, ipconfig->mask);
    sret = system(gCmdStr);
 
    /* use command 'route add' to set set gatewway (linux specific) */ 
    if(ipconfig->defGateway[0] != '\0')
    {
-      sprintf(gCmdStr, "/sbin/route add default gw %s > /dev/null 2>&1", ipconfig->defGateway);
+      sprintf(gCmdStr, "route add default gw %s > /dev/null 2>&1", ipconfig->defGateway);
       sret = system(gCmdStr);
    }
 
@@ -1811,26 +1811,26 @@
 	    case WMMAC_AC_VO:
 	        wfaTGSetPrio(Sockfd, 7);
 	        create_apts_msg(APTS_CK_VO, TxMsg, 0);
-	        printf("\r\nSending AC_VO trigger packet\n");
+	        DPRINT_LOG("\r\nSending AC_VO trigger packet\n");
 	        break;
 
 	    case WMMAC_AC_VI:
 	        wfaTGSetPrio(Sockfd, 5);
 	        create_apts_msg(APTS_CK_VI, TxMsg, 0);
-	        printf("\r\nSending AC_VI trigger packet\n");
+	        DPRINT_LOG("\r\nSending AC_VI trigger packet\n");
 	        break;
 
 	    case WMMAC_AC_BK:
 	        wfaTGSetPrio(Sockfd, 2);
 	        create_apts_msg(APTS_CK_BK, TxMsg, 0);
-	        printf("\r\nSending AC_BK trigger packet\n");
+	        DPRINT_LOG("\r\nSending AC_BK trigger packet\n");
 	        break;
 
 	    default:
             case WMMAC_AC_BE:
 	        wfaTGSetPrio(Sockfd, 0);
 	        create_apts_msg(APTS_CK_BE, TxMsg, 0);
-	        printf("\r\nSending AC_BE trigger packet\n");
+	        DPRINT_LOG("\r\nSending AC_BE trigger packet\n");
 	        break;
             }
 
@@ -1842,7 +1842,7 @@
 	else if (setwmm->action == WMMAC_ADDTS)
         {
 	    //wmmtspec_t* pCmdTspec = &(setwmm->actions.addts.tspec);
-            printf("ADDTS AC PARAMS: dialog id: %d, TID: %d, "
+            DPRINT_LOG("ADDTS AC PARAMS: dialog id: %d, TID: %d, "
 	           "DIRECTION: %d, PSB: %d, UP: %d, INFOACK: %d BURST SIZE DEF: %d"
 		   "Fixed %d, MSDU Size: %d, Max MSDU Size %d, "
 		   "MIN SERVICE INTERVAL: %d, MAX SERVICE INTERVAL: %d, "
@@ -2131,7 +2131,7 @@
       switch(presetParams->wirelessMode)
       {
          default:
-         printf("other mode does not need to support\n");
+         DPRINT_LOG("other mode does not need to support\n");
       }
 
       st = wfaExecuteCLI(gCmdStr);
@@ -2152,7 +2152,7 @@
    if(presetParams->psFlag)
    {
 
-      printf("%s\n", gCmdStr);
+      DPRINT_LOG("%s\n", gCmdStr);
       sret = system(gCmdStr);
    }
 
@@ -2638,7 +2638,7 @@
    sret = system(CLI);
 
    retstr = getenv("WFA_CLI_STATUS");
-   printf("cli status %s\n", retstr);
+   DPRINT_LOG("cli status %s\n", retstr);
    return atoi(retstr);
 }
 
@@ -2662,11 +2662,11 @@
     
 #ifdef WFA_PC_CONSOLE
 
-    printf("\nCS : The Stream ID is %d",streamid);
-    printf("\nCS :the addr is %s ",addr);
+    DPRINT_LOG("\nCS : The Stream ID is %d",streamid);
+    DPRINT_LOG("\nCS :the addr is %s ",addr);
     strcpy(addr,staPing->dipaddr);
-    printf("\nCS :Inside the WFA_PC_CONSLE BLOCK");
-    printf("\nCS :the addr is %s ",addr);
+    DPRINT_LOG("\nCS :Inside the WFA_PC_CONSLE BLOCK");
+    DPRINT_LOG("\nCS :the addr is %s ",addr);
     if (staPing->iptype == 2)
     {
         memset(bflag, 0, strlen(bflag));
@@ -2676,46 +2676,48 @@
         tmpstr = strtok(addr, ".");
         inum = atoi(tmpstr);
 
-        printf("interval %f\n", *interval);
+        DPRINT_LOG("interval %f\n", *interval);
+	if (*interval < 1.0)
+		*interval = 1.0;
 
         if(inum >= 224 && inum <= 239) // multicast
         {
         }
         else // if not MC, check if it is BC address
         {
-            printf("\nCS :Inside the BC address BLOCK");
-            printf("\nCS :the inum %d",inum);
+            DPRINT_LOG("\nCS :Inside the BC address BLOCK");
+            DPRINT_LOG("\nCS :the inum %d",inum);
             strtok(NULL, ".");
             //strtok(NULL, ".");
             tmpstr = strtok(NULL, ".");
-            printf("tmpstr %s\n", tmpstr);
+            DPRINT_LOG("tmpstr %s\n", tmpstr);
             inum = atoi(tmpstr);
-            printf("\nCS : The string is %s",tmpstr);
+            DPRINT_LOG("\nCS : The string is %s",tmpstr);
             if(inum != 255)
             memset(bflag, 0, strlen(bflag));
         }
     }
 #endif
-    printf("\nCS : The Stream ID is %d",streamid);
-    printf("IPtype : %i",staPing->iptype);
+    DPRINT_LOG("\nCS : The Stream ID is %d",streamid);
+    DPRINT_LOG("IPtype : %i",staPing->iptype);
 
     if (staPing->iptype == 2)
     {    
-        sprintf(cmdStr, "echo streamid=%i > /tmp/spout_%d.txt;wfaping6.sh %s %s -i %f -c %i -s %i -q >> /tmp/spout_%d.txt 2>/dev/null",
-          streamid,streamid,bflag, staPing->dipaddr, *interval, totalpkts, staPing->frameSize,streamid);
+        sprintf(cmdStr, "echo streamid=%i > /tmp/spout_%d.txt;wfaping6.sh %s %s -i %d -c %i -s %i -q >> /tmp/spout_%d.txt 2>/dev/null",
+          streamid,streamid,bflag, staPing->dipaddr, (int)*interval, totalpkts, staPing->frameSize,streamid);
         sret = system(cmdStr);
-        printf("\nCS : The command string is %s",cmdStr);
+        DPRINT_LOG("\nCS : The command string is %s",cmdStr);
     }
     else
     {
-        sprintf(cmdStr, "echo streamid=%i > /tmp/spout_%d.txt;wfaping.sh %s %s -i %f -c %i -s %i -q >> /tmp/spout_%d.txt 2>/dev/null",
-          streamid,streamid,bflag, staPing->dipaddr, *interval, totalpkts, staPing->frameSize,streamid);
+        sprintf(cmdStr, "echo streamid=%i > /tmp/spout_%d.txt;wfaping.sh %s %s -i %d -c %i -s %i -q >> /tmp/spout_%d.txt 2>/dev/null",
+          streamid,streamid,bflag, staPing->dipaddr, (int)*interval, totalpkts, staPing->frameSize,streamid);
         sret = system(cmdStr);
-        printf("\nCS : The command string is %s",cmdStr);
+        DPRINT_LOG("\nCS : The command string is %s",cmdStr);
     }    
     sprintf(cmdStr, "updatepid.sh /tmp/spout_%d.txt",streamid);
     sret = system(cmdStr);
-    printf("\nCS : The command string is %s",cmdStr);
+    DPRINT_LOG("\nCS : The command string is %s",cmdStr);
 
 }
 
@@ -2724,18 +2726,18 @@
     char strout[256];
     FILE *tmpfile = NULL;
     char cmdStr[128];
-    printf("Ping stop id %d\n", streamid);
+    DPRINT_LOG("Ping stop id %d\n", streamid);
     sprintf(cmdStr, "getpid.sh /tmp/spout_%d.txt /tmp/pid.txt",streamid);
     sret = system(cmdStr);
 
-    printf("\nCS : The command string is %s",cmdStr);
+    DPRINT_LOG("\nCS : The command string is %s",cmdStr);
 
     sret = system("stoping.sh /tmp/pid.txt ; sleep 2");
 
     sprintf(cmdStr, "getpstats.sh /tmp/spout_%d.txt",streamid);
     sret = system(cmdStr);
 
-    printf("\nCS : The command string is %s",cmdStr);
+    DPRINT_LOG("\nCS : The command string is %s",cmdStr);
 
     tmpfile = fopen("/tmp/stpsta.txt", "r+");
 
@@ -2755,7 +2757,7 @@
             stpResp->cmdru.pingStp.sendCnt = atoi(strout);
     }
 
-    printf("after scan sent count %i\n", stpResp->cmdru.pingStp.sendCnt);
+    DPRINT_LOG("after scan sent count %i\n", stpResp->cmdru.pingStp.sendCnt);
 
 
     if(fscanf(tmpfile, "%s", strout) != EOF)
@@ -2767,7 +2769,7 @@
         else
             stpResp->cmdru.pingStp.repliedCnt = atoi(strout);
     }
-    printf("after scan replied count %i\n", stpResp->cmdru.pingStp.repliedCnt);
+    DPRINT_LOG("after scan replied count %i\n", stpResp->cmdru.pingStp.repliedCnt);
 
     fclose(tmpfile);
 
@@ -2782,7 +2784,7 @@
    dutCmdResponse_t infoResp;
    /* dutCommand_t *getInfo = (dutCommand_t *)caCmdBuf; */
 
-   printf("\n Entry wfaStaGetP2pDevAddress... ");
+   DPRINT_LOG("\n Entry wfaStaGetP2pDevAddress... ");
 
    // Fetch the device ID and store into infoResp->cmdru.devid 
    //strcpy(infoResp->cmdru.devid, str);
@@ -2805,7 +2807,7 @@
    dutCmdResponse_t infoResp;
    /* caStaSetP2p_t *getStaSetP2p = (caStaSetP2p_t *)caCmdBuf; uncomment and use it*/
 
-   printf("\n Entry wfaStaSetP2p... ");
+   DPRINT_LOG("\n Entry wfaStaSetP2p... ");
 
    // Implement the function and this does not return any thing back.
    
@@ -2823,7 +2825,7 @@
    dutCmdResponse_t infoResp;
    /* caStaP2pConnect_t *getStaP2pConnect = (caStaP2pConnect_t *)caCmdBuf; uncomment and use it */
 
-   printf("\n Entry wfaStaP2pConnect... ");
+   DPRINT_LOG("\n Entry wfaStaP2pConnect... ");
 
    // Implement the function and does not return anything.
 
@@ -2843,7 +2845,7 @@
    dutCmdResponse_t infoResp;
    //caStaStartAutoGo_t *getStaStartAutoGo = (caStaStartAutoGo_t *)caCmdBuf;
 
-   printf("\n Entry wfaStaStartAutoGo... ");
+   DPRINT_LOG("\n Entry wfaStaStartAutoGo... ");
 
    // Fetch the group ID and store into 	infoResp->cmdru.grpid 
    strcpy(&infoResp.cmdru.grpid[0], "ABCDEFGH");
@@ -2866,7 +2868,7 @@
    dutCmdResponse_t infoResp;
    //caStaP2pStartGrpForm_t *getStaP2pStartGrpForm = (caStaP2pStartGrpForm_t *)caCmdBuf;
 
-   printf("\n Entry wfaStaP2pStartGrpFormation... ");
+   DPRINT_LOG("\n Entry wfaStaP2pStartGrpFormation... ");
 
    // Fetch the device mode and put in 	infoResp->cmdru.p2presult 
    //strcpy(infoResp->cmdru.p2presult, "GO");
@@ -2894,7 +2896,7 @@
    dutCmdResponse_t infoResp;
    //caStaP2pDissolve_t *getStap2pDissolve= (caStaP2pDissolve_t *)caCmdBuf;
 
-   printf("\n Entry wfaStaP2pDissolve... ");
+   DPRINT_LOG("\n Entry wfaStaP2pDissolve... ");
 
    // Implement the function and this does not return any thing back.
    
@@ -2913,7 +2915,7 @@
    dutCmdResponse_t infoResp;
    /* caStaSendP2pInvReq_t *getStaP2pInvReq= (caStaSendP2pInvReq_t *)caCmdBuf; */
 
-   printf("\n Entry wfaStaSendP2pInvReq... ");
+   DPRINT_LOG("\n Entry wfaStaSendP2pInvReq... ");
 
    // Implement the function and this does not return any thing back.
    
@@ -2935,7 +2937,7 @@
     * caStaAcceptP2pInvReq_t *getStaP2pInvReq= (caStaAcceptP2pInvReq_t *)caCmdBuf;
     */
 
-   printf("\n Entry wfaStaAcceptP2pInvReq... ");
+   DPRINT_LOG("\n Entry wfaStaAcceptP2pInvReq... ");
 
    // Implement the function and this does not return any thing back.
    
@@ -2957,7 +2959,7 @@
     * caStaSendP2pProvDisReq_t *getStaP2pProvDisReq= (caStaSendP2pProvDisReq_t *)caCmdBuf;
     */
 
-   printf("\n Entry wfaStaSendP2pProvDisReq... ");
+   DPRINT_LOG("\n Entry wfaStaSendP2pProvDisReq... ");
 
    // Implement the function and this does not return any thing back.
    
@@ -2978,7 +2980,7 @@
     * caStaSetWpsPbc_t *getStaSetWpsPbc= (caStaSetWpsPbc_t *)caCmdBuf;
     */
 
-   printf("\n Entry wfaStaSetWpsPbc... ");
+   DPRINT_LOG("\n Entry wfaStaSetWpsPbc... ");
 
    // Implement the function and this does not return any thing back.
    
@@ -2999,7 +3001,7 @@
     * caStaWpsReadPin_t *getStaWpsReadPin= (caStaWpsReadPin_t *)caCmdBuf;
     */
 
-   printf("\n Entry wfaStaWpsReadPin... ");
+   DPRINT_LOG("\n Entry wfaStaWpsReadPin... ");
 
    // Fetch the device PIN and put in 	infoResp->cmdru.wpsPin 
    //strcpy(infoResp->cmdru.wpsPin, "12345678");
@@ -3022,7 +3024,7 @@
 {
    dutCmdResponse_t infoResp;
 
-   printf("\n Entry wfaStaWpsReadLabel... ");
+   DPRINT_LOG("\n Entry wfaStaWpsReadLabel... ");
 
    // Fetch the device Label and put in	infoResp->cmdru.wpsPin 
    //strcpy(infoResp->cmdru.wpsPin, "12345678");
@@ -3047,7 +3049,7 @@
     * caStaWpsEnterPin_t *getStaWpsEnterPin= (caStaWpsEnterPin_t *)caCmdBuf;
     */  
 
-   printf("\n Entry wfaStaWpsEnterPin... ");
+   DPRINT_LOG("\n Entry wfaStaWpsEnterPin... ");
 
    // Implement the function and this does not return any thing back.
 
@@ -3068,7 +3070,7 @@
    dutCmdResponse_t infoResp;
    /* caStaGetPsk_t *getStaGetPsk= (caStaGetPsk_t *)caCmdBuf; uncomment and use it */
 
-   printf("\n Entry wfaStaGetPsk... ");
+   DPRINT_LOG("\n Entry wfaStaGetPsk... ");
 
 
    // Fetch the device PP and SSID  and put in 	infoResp->cmdru.pskInfo 
@@ -3092,7 +3094,7 @@
    dutCmdResponse_t infoResp;
    /* dutCommand_t *getStaP2pReset= (dutCommand_t *)caCmdBuf; */
 
-   printf("\n Entry wfaStaP2pReset... ");
+   DPRINT_LOG("\n Entry wfaStaP2pReset... ");
    // Implement the function and this does not return any thing back.
    
    infoResp.status = STATUS_COMPLETE;
@@ -3114,7 +3116,7 @@
    
    caStaGetIpConfigResp_t *ifinfo = &(infoResp.cmdru.getIfconfig);
 
-   printf("\n Entry wfaStaGetP2pIpConfig... ");
+   DPRINT_LOG("\n Entry wfaStaGetP2pIpConfig... ");
 
 
    // Fetch the device IP config  and put in 	infoResp->cmdru 
@@ -3142,7 +3144,7 @@
 {
    dutCmdResponse_t infoResp;
    
-   printf("\n Entry wfaStaSendServiceDiscoveryReq... ");
+   DPRINT_LOG("\n Entry wfaStaSendServiceDiscoveryReq... ");
    // Implement the function and this does not return any thing back.
 
 	
@@ -3163,9 +3165,9 @@
    dutCmdResponse_t infoResp;
    //caStaSendP2pPresenceReq_t *staSendP2pPresenceReq= (caStaSendP2pPresenceReq_t *)caCmdBuf;
    
-   //printf("\n Entry wfaStaSendP2pPresenceReq... ");
-   //printf("\n The long long Duration: %lld... ",staSendP2pPresenceReq->duration);
-   //printf("\n The long long interval : %lld.. ",staSendP2pPresenceReq->interval);
+   //DPRINT_LOG("\n Entry wfaStaSendP2pPresenceReq... ");
+   //DPRINT_LOG("\n The long long Duration: %lld... ",staSendP2pPresenceReq->duration);
+   //DPRINT_LOG("\n The long long interval : %lld.. ",staSendP2pPresenceReq->interval);
 
    infoResp.status = STATUS_COMPLETE;
    wfaEncodeTLV(WFA_STA_P2P_SEND_PRESENCE_REQ_RESP_TLV, sizeof(infoResp), (BYTE *)&infoResp, respBuf);   
@@ -3182,7 +3184,7 @@
    dutCmdResponse_t infoResp;
    /* caStaSetSleep_t *staSetSleepReq= (caStaSetSleep_t *)caCmdBuf; */
    
-   printf("\n Entry wfaStaSetSleepReq... ");
+   DPRINT_LOG("\n Entry wfaStaSetSleepReq... ");
    // Implement the function and this does not return any thing back.
 
 	
@@ -3201,7 +3203,7 @@
    dutCmdResponse_t infoResp;
    /* caStaSetOpprPs_t *staSetOpperPsReq= (caStaSetOpprPs_t *)caCmdBuf; uncomment and use it */
    
-   printf("\n Entry wfaStaSetOpportunisticPsReq... ");
+   DPRINT_LOG("\n Entry wfaStaSetOpportunisticPsReq... ");
    // Implement the function and this does not return any thing back.
 
 	
@@ -3257,7 +3259,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_addba_reject failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
        }
     }
 	
@@ -3272,7 +3274,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_ampdu failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3286,7 +3288,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_amsdu failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-	    return FALSE;
+	    return WFA_ERROR;
         }
     }
 
@@ -3300,7 +3302,7 @@
             strcpy(v11nParamsResp->cmdru.info, "_set_greenfield failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
        }
     }
 
@@ -3314,7 +3316,7 @@
              strcpy(v11nParamsResp->cmdru.info, "set_mcs failed");
              wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
              *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-             return FALSE;
+             return WFA_ERROR;
          }
     } 
     else if (v11nParams->mcs32!= 0xFF && v11nParams->mcs32 < 2 && v11nParams->mcs_fixedrate[0] == '\0')
@@ -3327,7 +3329,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_mcs32 failed");
 	    wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
 	    *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     } 
     else if (v11nParams->mcs32 == 0xFF && v11nParams->mcs_fixedrate[0] != '\0')
@@ -3340,7 +3342,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_mcs32 failed");
 	    wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
 	    *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3354,7 +3356,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_rifs_test failed");
 	    wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
 	    *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3368,7 +3370,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_sgi20 failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3397,7 +3399,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_smps failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3411,7 +3413,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_stbc_rx failed");
 	    wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
 	    *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 	
@@ -3425,7 +3427,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_11n_channel_width failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 	
@@ -3439,7 +3441,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_40_intolerant failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3453,7 +3455,7 @@
 	    strcpy(v11nParamsResp->cmdru.info, "set_txsp_stream failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
 
     }
@@ -3468,7 +3470,7 @@
             strcpy(v11nParamsResp->cmdru.info, "set_rxsp_stream failed");
             wfaEncodeTLV(WFA_STA_SET_11N_RESP_TLV, sizeof(dutCmdResponse_t), (BYTE *)v11nParamsResp, respBuf);
             *respLen = WFA_TLV_HDR_LEN + sizeof(dutCmdResponse_t);
-            return FALSE;
+            return WFA_ERROR;
         }
     }
 
@@ -3488,7 +3490,7 @@
    dutCmdResponse_t infoResp;
    /* caStaAddARPTableEntry_t *staAddARPTableEntry= (caStaAddARPTableEntry_t *)caCmdBuf; uncomment and use it */
    
-   printf("\n Entry wfastaAddARPTableEntry... ");
+   DPRINT_LOG("\n Entry wfastaAddARPTableEntry... ");
    // Implement the function and this does not return any thing back.
 
    infoResp.status = STATUS_COMPLETE;
@@ -3506,7 +3508,7 @@
    dutCmdResponse_t infoResp;
    /* caStaBlockICMPResponse_t *staAddARPTableEntry= (caStaBlockICMPResponse_t *)caCmdBuf; uncomment and use it */
    
-   printf("\n Entry wfaStaBlockICMPResponse... ");
+   DPRINT_LOG("\n Entry wfaStaBlockICMPResponse... ");
    // Implement the function and this does not return any thing back.
 
    infoResp.status = STATUS_COMPLETE;
@@ -3573,7 +3575,7 @@
    dutCmdResponse_t infoResp;
    //caStaStartWfdConn_t *staStartWfdConn= (caStaStartWfdConn_t *)caCmdBuf; //uncomment and use it
 	
-   printf("\n Entry wfaStaStartWfdConnection... ");
+   DPRINT_LOG("\n Entry wfaStaStartWfdConnection... ");
 	
 	
    // Fetch the GrpId and WFD session and return
@@ -3607,9 +3609,9 @@
     
    caStaCliCmdResp_t infoResp;
 
-   printf("\n Entry wfaStaCliCommand... ");
+   DPRINT_LOG("\n Entry wfaStaCliCommand... ");
 
-   printf("The command Received: %s",caCmdBuf);
+   DPRINT_LOG("The command Received: %s",caCmdBuf);
 
    memcpy(cmdName, strtok_r((char *)caCmdBuf, ",", (char **)&pcmdStr), 32);
 
@@ -3635,7 +3637,7 @@
    {
       while(fgets(wfaCliBuff, 64, wfaCliFd) != NULL)
       {
-         //printf("\nLine read from CLI file : %s",wfaCliBuff);
+         //DPRINT_LOG("\nLine read from CLI file : %s",wfaCliBuff);
          if(ferror(wfaCliFd))
             break;
 
@@ -3653,38 +3655,38 @@
    }
 
 
-   //printf("\n Command Return Flag : %d",CmdReturnFlag);
+   //DPRINT_LOG("\n Command Return Flag : %d",CmdReturnFlag);
    st = 1;
    memset(&retstr[0],'\0',255);
    memset(&tmp[0],'\0',255);
 
    sprintf(gCmdStr, "%s",  CmdStr);
-   printf("\nCLI Command -- %s\n", gCmdStr);
+   DPRINT_LOG("\nCLI Command -- %s\n", gCmdStr);
     
    sh_pipe = popen(gCmdStr,"r");
     
    if(!sh_pipe)
    {
-      printf ("Error in opening pipe");
+      DPRINT_LOG ("Error in opening pipe");
    }
 
 
    //tmp_val=getdelim(&retstr,255,"\n",sh_pipe);
    if (fgets(&retstr[0], 255, sh_pipe) == NULL)
    {
-      printf("Getting NULL string\n");
+      DPRINT_LOG("Getting NULL string\n");
    }
     
    if(pclose(sh_pipe) != 0)
    {
-      printf("Error in closing shell cmd pipe");
+      DPRINT_LOG("Error in closing shell cmd pipe");
    }
    sleep(2);
     
-   printf("CLI retun value- %s\n",retstr);
+   DPRINT_LOG("CLI retun value- %s\n",retstr);
 
    memcpy(tmp, strtok_r((char *)retstr, "-", (char **)&pcmdStr), 2);
-   printf("\ncli status - %s",tmp);
+   DPRINT_LOG("\ncli status - %s",tmp);
    if(strlen(tmp) > 0)
    st = atoi(tmp);
 
@@ -3698,12 +3700,12 @@
        {
            str=strtok_r(NULL, "\n", (char **)&pcmdStr);
            strncpy(tmp,str, 255);
-           printf("\nresult - %s",tmp);
+           DPRINT_LOG("\nresult - %s",tmp);
            if(tmp != NULL)
            {
                 memset(&infoResp.result[0],'\0',WFA_CLI_CMD_RESP_LEN-1);			    
                 strncpy(&infoResp.result[0], tmp,(strlen(tmp) < WFA_CLI_CMD_RESP_LEN ) ? strlen(tmp) : (WFA_CLI_CMD_RESP_LEN-1) );
-                printf("Return CLI result to CA: %s****\n", &infoResp.result[0]);			
+                DPRINT_LOG("Return CLI result to CA: %s****\n", &infoResp.result[0]);			
            }
            else
                 strcpy(&infoResp.result[0], "ENV_VAR_NOT_DEFINED");
@@ -3720,8 +3722,8 @@
    wfaEncodeTLV(WFA_STA_CLI_CMD_RESP_TLV, sizeof(infoResp), (BYTE *)&infoResp, respBuf);   
    *respLen = WFA_TLV_HDR_LEN + sizeof(infoResp);
 
-    printf("\nExit from CLI function\n");    
-   return TRUE;
+    DPRINT_LOG("\nExit from CLI function\n");    
+   return WFA_SUCCESS;
 
 	
 }
@@ -3734,7 +3736,7 @@
     dutCmdResponse_t infoResp;
 //  caStaConnectGoStartWfd_t *staConnecGoStartWfd= (caStaConnectGoStartWfd_t *)caCmdBuf; //uncomment and use it
 	
-    printf("\n Entry wfaStaConnectGoStartWfd... ");
+    DPRINT_LOG("\n Entry wfaStaConnectGoStartWfd... ");
 
     // connect the specified GO and then establish the wfd session	
 	
@@ -3758,7 +3760,7 @@
     caStaGenEvent_t *staGenerateEvent= (caStaGenEvent_t *)caCmdBuf; //uncomment and use it
     caWfdStaGenEvent_t *wfdGenEvent;
 	
-    printf("\n Entry wfaStaGenerateEvent... ");
+    DPRINT_LOG("\n Entry wfaStaGenerateEvent... ");
 
 
     // Geneate the specified action and return with complete/error.
@@ -3808,7 +3810,7 @@
     dutCmdResponse_t infoResp;
 //  caStaReinvokeWfdSession_t *staReinvokeSession= (caStaReinvokeWfdSession_t *)caCmdBuf; //uncomment and use it
 	
-    printf("\n Entry wfaStaReinvokeWfdSession... ");
+    DPRINT_LOG("\n Entry wfaStaReinvokeWfdSession... ");
 
     // Reinvoke the WFD session by accepting the p2p invitation   or sending p2p invitation
 	
@@ -3829,7 +3831,7 @@
 
    caStaGetParameterResp_t *paramList = &infoResp.cmdru.getParamValue;
 	
-   printf("\n Entry wfaStaGetParameter... ");
+   DPRINT_LOG("\n Entry wfaStaGetParameter... ");
 
    // Check the program type
    if(staGetParam->program == PROG_TYPE_WFD)
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_miscs.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_miscs.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_miscs.c	2015-02-27 14:26:47.999239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_miscs.c	2015-02-27 14:26:52.823239660 +0300
@@ -48,7 +48,7 @@
 
 void printProfile(tgProfile_t *pf)
 {
-    printf("profile type %i direction %i Dest ipAddr %s Dest port %i So ipAddr %s So port %i rate %i duration %i pksize %i\n", pf->profile, pf->direction, pf->dipaddr, pf->dport, pf->sipaddr, pf->sport, pf->rate, pf->duration, pf->pksize);
+    DPRINT_LOG("profile type %i direction %i Dest ipAddr %s Dest port %i So ipAddr %s So port %i rate %i duration %i pksize %i\n", pf->profile, pf->direction, pf->dipaddr, pf->dport, pf->sipaddr, pf->sport, pf->rate, pf->duration, pf->pksize);
 }
 
 int isString(char *str)
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_tg.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_tg.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_tg.c	2015-02-27 14:26:47.995239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_tg.c	2015-02-27 14:26:52.827239660 +0300
@@ -143,12 +143,12 @@
     if(staPing->frameSize == 0)
          staPing->frameSize = 100;
     
-    printf("framerate %f\n", staPing->frameRate);    
+    DPRINT_LOG("framerate %f\n", staPing->frameRate);    
     if(staPing->frameRate == 0)
          staPing->frameRate = 1;
 
     interval = (float) 1/staPing->frameRate;
-    printf("TG: interval %f\n", interval);
+    DPRINT_LOG("TG: interval %f\n", interval);
 
     if(staPing->duration == 0)
          staPing->duration = 30;
@@ -157,13 +157,13 @@
     {
     case WFA_PING_ICMP_ECHO:
 #ifndef WFA_PING_UDP_ECHO_ONLY
-        printf("The steam ID is:%d \n",streamId);
+        DPRINT_LOG("The steam ID is:%d \n",streamId);
         wfaSendPing(staPing, &interval, streamId);
 
         spresp->status = STATUS_COMPLETE;
         spresp->streamId = streamid;
 #else
-        printf("Only support UDP ECHO\n");
+        DPRINT_LOG("Only support UDP ECHO\n");
 #endif
         break;
 
@@ -199,7 +199,7 @@
                 staPing->duration = 3600;
         }
 #else
-        printf("Doesn't support UDP Echo\n");
+        DPRINT_LOG("Doesn't support UDP Echo\n");
 #endif
         break;
     }
@@ -230,12 +230,12 @@
 
     stpResp->status = STATUS_COMPLETE;
 
-    printf("CS: The length %d\n and the command buff is \n",len);
+    DPRINT_LOG("CS: The length %d\n and the command buff is \n",len);
 
     for (i=0;i<8;i++)
-       printf(" %x ",caCmdBuf[i]);
+       DPRINT_LOG(" %x ",caCmdBuf[i]);
 
-    printf("\nthe stream id is %d",streamid);
+    DPRINT_LOG("\nthe stream id is %d",streamid);
 
     if( gtgTransac == streamid&&gtgSend == streamid)
     {
@@ -294,7 +294,7 @@
 
     if(slotCnt == 0)
     {
-       printf("resetting stream table\n");
+       DPRINT_LOG("resetting stream table\n");
        wMEMSET(gStreams, 0, WFA_MAX_TRAFFIC_STREAMS*sizeof(tgStream_t));
     }
    
@@ -408,7 +408,7 @@
               wPT_MUTEX_LOCK(&wmm_thr[usedThread].thr_flag_mutex);
               wPT_COND_SIGNAL(&wmm_thr[usedThread].thr_flag_cond);
               wPT_MUTEX_UNLOCK(&wmm_thr[usedThread].thr_flag_mutex);
-              printf("Recv Start in thread %i for streamid %i\n", usedThread, streamid);
+              DPRINT_LOG("Recv Start in thread %i for streamid %i\n", usedThread, streamid);
 	      usedThread++;
            break;
 #endif       
@@ -479,14 +479,14 @@
     for(i=0; i<numStreams; i++)
     {
         wMEMCPY(&streamid, parms+(4*i), 4);
-        printf(" stop stream id %i\n", streamid);
+        DPRINT_LOG(" stop stream id %i\n", streamid);
         myStream = findStreamProfile(streamid); 
         if(myStream == NULL)
         {
             status = STATUS_INVALID;
             wfaEncodeTLV(WFA_TRAFFIC_AGENT_RECV_STOP_RESP_TLV, 4, (BYTE *)&status, respBuf);
             *respLen = WFA_TLV_HDR_LEN + 4;
-            printf("stream table empty\n");
+            DPRINT_LOG("stream table empty\n");
             continue;    
         }
 
@@ -563,7 +563,7 @@
     // mark the stream inactive
     myStream->state = WFA_STREAM_INACTIVE;
 
-    printf("Sending back the statistics at recvstop\n");
+    DPRINT_LOG("Sending back the statistics at recvstop\n");
     wfaEncodeTLV(WFA_TRAFFIC_AGENT_RECV_STOP_RESP_TLV, id_cnt * sizeof(dutCmdResponse_t), dutRspBuf, respBuf);
 
     /* done here */
@@ -800,13 +800,13 @@
 	     */
             *sleepTime = 20000; /* fixed 20 miniseconds */
             *throttledRate = (rate?rate:10000)/50;   
-	        printf("Hi Sleep time %i, throttledRate %i\n", *sleepTime, *throttledRate);
+	        DPRINT_LOG("Hi Sleep time %i, throttledRate %i\n", *sleepTime, *throttledRate);
         }
         else if(rate == 0)
         {
             *sleepTime = 20000; /* fixed 20 miniseconds */
             *throttledRate = (rate?rate:10000)/50;  
-	        printf("Hi Sleep time %i, throttledRate %i\n", *sleepTime, *throttledRate);
+	        DPRINT_LOG("Hi Sleep time %i, throttledRate %i\n", *sleepTime, *throttledRate);
         }
         else if (rate > 0 && rate <= 50) /* typically for voice */
         {
@@ -908,7 +908,7 @@
      */
     if(theProf->duration != 0)
     {
-        printf("duration %i\n", theProf->duration);
+        DPRINT_LOG("duration %i\n", theProf->duration);
         
         /* 
          *  use this to decide periodical interval sleep time and frames to send
@@ -931,7 +931,7 @@
 	if (act_sleep_time <= 0)
 	    act_sleep_time = sleepTime;  
 
-        printf("sleep time %i act_sleep_time %i\n", sleepTime, act_sleep_time);
+        DPRINT_LOG("sleep time %i act_sleep_time %i\n", sleepTime, act_sleep_time);
 
         runLoop=1;
         while(runLoop)
@@ -1055,7 +1055,7 @@
     /* free the buffer */
     wFREE(packBuf);
 
-    //printf("done sending long\n");
+    //DPRINT_LOG("done sending long\n");
     /* return statistics */
     sendResp.status = STATUS_COMPLETE;
     sendResp.streamId = myStream->id;
@@ -1090,7 +1090,7 @@
       //gtimeOut = 0; 
       gtgRecv = 0;
       gtgSend = 0;
-      printf("stop short traffic\n");
+      DPRINT_LOG("stop short traffic\n");
 
       myStream = findStreamProfile(streamid);
       if(myStream != NULL)
@@ -1133,13 +1133,13 @@
 
    if(gtgRecv && gtgTransac)
    {
-//      printf("mySock %i sipaddr %s sport %i\n", mySockfd, theProf->sipaddr, theProf->sport); 
+//      DPRINT_LOG("mySock %i sipaddr %s sport %i\n", mySockfd, theProf->sipaddr, theProf->sport); 
       toAddr.sin_addr.s_addr = inet_addr(theProf->sipaddr);
       toAddr.sin_port = htons(theProf->sport); 
    }
    else if(gtgSend && gtgTransac)
    {
-//      printf("mySock %i dipaddr %s dport %i\n", mySockfd, theProf->dipaddr, theProf->dport); 
+//      DPRINT_LOG("mySock %i dipaddr %s dport %i\n", mySockfd, theProf->dipaddr, theProf->dport); 
       toAddr.sin_addr.s_addr = inet_addr(theProf->dipaddr);
       toAddr.sin_port = htons(theProf->dport); 
    }
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_thr.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_thr.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_thr.c	2015-02-27 14:26:47.999239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_thr.c	2015-02-27 14:26:52.831239660 +0300
@@ -299,7 +299,7 @@
       {
           sendStatsResp->status = STATUS_COMPLETE;
           sendStatsResp->streamId = allStreams->id;
-          printf("stats stream id %i\n", allStreams->id);
+          DPRINT_LOG("stats stream id %i\n", allStreams->id);
           wMEMCPY(&sendStatsResp->cmdru.stats, &allStreams->stats, sizeof(tgStats_t));          
 
           sendStatsResp++;
@@ -310,7 +310,7 @@
    } 
 
 #if 1
-   printf("%u %u %llu %llu\n", first->cmdru.stats.txFrames,
+   DPRINT_LOG("%u %u %llu %llu\n", first->cmdru.stats.txFrames,
                                   first->cmdru.stats.rxFrames,
                                   first->cmdru.stats.txPayloadBytes,
                                   first->cmdru.stats.rxPayloadBytes); 
@@ -320,13 +320,13 @@
                  (BYTE *)first, (BYTE *)buff);
 
    pkLen = WFA_TLV_HDR_LEN + total*sizeof(dutCmdResponse_t); 
-   printf("pkLen %i\n", pkLen);
+   DPRINT_LOG("pkLen %i\n", pkLen);
 
 #if 0
    for(i = 0; i< pkLen; i++)
-   printf("%x ", buff[i]);
+   DPRINT_LOG("%x ", buff[i]);
 
-   printf("\n");
+   DPRINT_LOG("\n");
 #endif
 
    if(wfaCtrlSend(sock, (BYTE *)buff, pkLen) != pkLen)
@@ -417,7 +417,7 @@
       create_apts_msg(APTS_CONFIRM, psTxMsg,0);
    wSENDTO(psSockfd, psTxMsg, msgsize, 0, (struct sockaddr *)&wmmps_info.psToAddr, sizeof(struct sockaddr));
    mpx("STA msg",psTxMsg,64);
-   printf("Confirm Sent\n");
+   DPRINT_LOG("Confirm Sent\n");
 
    (*state)++;
 
@@ -614,7 +614,7 @@
        /* it needs to reset the thr_flag to wait again */
        while(my_wmm->thr_flag == 0)
        {
-         printf("Mutex wait\n");
+         DPRINT_LOG("Mutex wait\n");
           /*
            * in normal situation, the signal indicates the thr_flag changed to
            * a valid number (stream id), then it will go out the loop and do
@@ -641,7 +641,7 @@
            continue;
        }
 
-       printf("Mutex unlocked\n");
+       DPRINT_LOG("Mutex unlocked\n");
        switch(myProfile->direction)
        {
            case DIRECT_SEND:
@@ -738,7 +738,7 @@
                  {
                     if(respBuf == NULL)
                     {
-                       printf("a Null buff\n");
+                       DPRINT_LOG("a Null buff\n");
                     }
                     memset(respBuf, 0, WFA_RESP_BUF_SZ);
                     respLen = 0;
@@ -764,7 +764,7 @@
                  if(nbytes <= 0)
                  {
                      setsockopt(mySock, SOL_SOCKET, SO_RCVTIMEO, (char *)&tmout, (socklen_t) sizeof(tmout)); 
-                     printf("time out event, resend a new packet ...\n");
+                     DPRINT_LOG("time out event, resend a new packet ...\n");
 
                      tmout.tv_sec = 0;
                      tmout.tv_usec = 10000;    // set for 20 min sec timeout              
@@ -832,9 +832,9 @@
             */
 	       if(myId == sendThrId) 
 	       {
-               printf("Sending stats back\n");
+               DPRINT_LOG("Sending stats back\n");
                wfaSentStatsResp(gxcSockfd, respBuf);
-               printf("done stats\n");
+               DPRINT_LOG("done stats\n");
                sendThrId = 0;
 	       }
 
@@ -890,7 +890,7 @@
 	       mySock = wfaCreateUDPSock(myProfile->dipaddr, myProfile->dport);
            if(mySock == -1)
            {
-               printf("Error open socket\n");
+               DPRINT_LOG("Error open socket\n");
                continue;
            }
 
@@ -901,7 +901,7 @@
            tgE2EStats_t *e2esp = NULL;
            //int totalE2Cnt = myProfile->duration * WFA_G_CODEC_RATE;
            int totalE2Cnt = 220 * WFA_G_CODEC_RATE;
-           printf("init E2Cnt %i\n", totalE2Cnt);
+           DPRINT_LOG("init E2Cnt %i\n", totalE2Cnt);
            if(myProfile->profile == PROF_IPTV)
            {
                e2esp = malloc(totalE2Cnt * sizeof(tgE2EStats_t));
@@ -984,7 +984,7 @@
 
                   wGETTIMEOFDAY(&currtime, NULL);
                   sprintf(e2eResults, "/tmp/e2e%u-%i.txt", (unsigned int) currtime.tv_sec, myStreamId);
-                  printf("file %s cnt %i\n", e2eResults, le2eCnt); 
+                  DPRINT_LOG("file %s cnt %i\n", e2eResults, le2eCnt); 
                   e2eoutp = fopen(e2eResults, "w+");
                   if(e2eoutp != NULL)
                   {
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_wmmps.c Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_wmmps.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/lib/wfa_wmmps.c	2015-02-27 14:26:47.991239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/lib/wfa_wmmps.c	2015-02-27 14:26:52.835239660 +0300
@@ -382,18 +382,18 @@
 
    if (len==0) 
    { 
-      printf("<empty string>"); return; 
+      DPRINT_LOG("<empty string>"); return; 
    }
 
    for (i = 0; i < len; i++) 
    {
-      printf("%02x ", *((unsigned char *)buf + i));
+      DPRINT_LOG("%02x ", *((unsigned char *)buf + i));
       if ((i&0xf)==15) 
-         printf("\n   ");
+         DPRINT_LOG("\n   ");
    }
 
    if ((i&0xf))
-      printf("\n");
+      DPRINT_LOG("\n");
 }
 
 /* trace print*/
@@ -401,7 +401,7 @@
 {
    char *buf = buf_v;
 
-   printf("%s   MSG: %s\n   ", m, &buf[44] );
+   DPRINT_LOG("%s   MSG: %s\n   ", m, &buf[44] );
    print_hex_string(buf, len);
 }
 
@@ -445,40 +445,40 @@
     switch(rmsg[10])
     {
        case APTS_DEFAULT:
-          printf("Recvd: APTS_DEFAULT\n");
+          DPRINT_LOG("Recvd: APTS_DEFAULT\n");
        break;
        case APTS_HELLO:
-          printf("Recvd: APTS_HELLO\n");
+          DPRINT_LOG("Recvd: APTS_HELLO\n");
        break;
        case APTS_BCST:
-          printf("Recvd: APTS_BCST\n");
+          DPRINT_LOG("Recvd: APTS_BCST\n");
        break;
        case APTS_CONFIRM:
-          printf("Recvd: APTS_CONFIRM\n");
+          DPRINT_LOG("Recvd: APTS_CONFIRM\n");
        break;
        case APTS_STOP:
-          printf("Recvd: APTS_STOP\n");
+          DPRINT_LOG("Recvd: APTS_STOP\n");
        break;
        case APTS_CK_BE:
-          printf("Recvd: APTS_CK_BE\n");
+          DPRINT_LOG("Recvd: APTS_CK_BE\n");
        break;
        case APTS_CK_BK:
-          printf("Recvd: APTS_CK_BK\n");
+          DPRINT_LOG("Recvd: APTS_CK_BK\n");
        break;
        case APTS_CK_VI:
-          printf("Recvd: APTS_CK_VI\n");
+          DPRINT_LOG("Recvd: APTS_CK_VI\n");
        break;
        case APTS_CK_VO:
-          printf("Recvd: APTS_CK_VO\n");
+          DPRINT_LOG("Recvd: APTS_CK_VO\n");
        break;
        case APTS_RESET:
-          printf("Recvd: APTS_RESET\n");
+          DPRINT_LOG("Recvd: APTS_RESET\n");
        break;
        case APTS_RESET_RESP:
-          printf("Recvd: APTS_RESET_RESP\n");
+          DPRINT_LOG("Recvd: APTS_RESET_RESP\n");
        break;
        case APTS_RESET_STOP:
-          printf("Recvd: APTS_RESET_STOP\n");
+          DPRINT_LOG("Recvd: APTS_RESET_STOP\n");
        break;
      }
 #endif
@@ -510,7 +510,7 @@
         wfaTGSetPrio(psSockfd, TG_WMM_AC_BE);
         wSENDTO(psSockfd, psTxMsg, msgsize, 0, (struct sockaddr *)&wmmps_info.psToAddr, sizeof(struct sockaddr));
         mpx("STA msg",psTxMsg,64);
-        printf("Too many retries\n");
+        DPRINT_LOG("Too many retries\n");
 	//exit(-8);
     }
     if(!reset_recd)
@@ -760,7 +760,7 @@
          DPRINT_ERR(WFA_ERR, "Cant Set PS OFF\n");
       }
       else
-         printf("\r\n STA PS OFF \n");
+         DPRINT_LOG("\r\n STA PS OFF \n");
    }
    else
    {
@@ -772,7 +772,7 @@
       }
       else
       {
-         printf("\r\n STA PS ON \n");
+         DPRINT_LOG("\r\n STA PS ON \n");
       }
    }
 
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/Makefile.inc Sigma_Sample_DUT_Code-Linux_v8.1.1/Makefile.inc
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/Makefile.inc	2015-02-27 14:26:47.991239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/Makefile.inc	2015-02-27 14:26:52.835239660 +0300
@@ -14,7 +14,7 @@
 # USE OR PERFORMANCE OF THIS SOFTWARE.
 #*****************************************************************************/
 
-CC = gcc
+CC ?= gcc
 LIB=lib
 DUT=dut
 CA=ca
@@ -41,7 +41,7 @@
 #CFLAGS = -g -O2 -D_REENTRANT  -DWFA_WMM_PS_EXT -DWFA_WMM_AC -DWFA_PC_CONSOLE -DWFA_STA_TB -Wall -I../inc
 
 # This is for WPA2 as default
-CFLAGS = -g -O2 -D_REENTRANT -Wall -I../inc
+CFLAGS = -g -O2 -D_REENTRANT -Wall -Werror -I../inc
 
 DUTLIBS = ../lib/libwfa_dut.a -lpthread
 CALIBS = ../lib/libwfa_ca.a -lpthread
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/scripts/getipconfig.sh Sigma_Sample_DUT_Code-Linux_v8.1.1/scripts/getipconfig.sh
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/scripts/getipconfig.sh	2015-02-27 14:26:48.003239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/scripts/getipconfig.sh	2015-02-27 14:26:52.835239660 +0300
@@ -19,9 +19,9 @@
 # $1 is tmp file name
 # $2 is the interface name
 
-echo -n "dhcpcli=" > $1 ; ps ax | grep dhc | cut -f2 -d: | cut -f2 -d' ' | grep dhclient >> $1
+echo -n "dhcpcli=" > $1 ; ps | grep dhc | cut -f2 -d: | cut -f2 -d' ' | grep dhclient >> $1
 echo ' ' >> $1
-echo -n "mac=" >> $1; ifconfig $2 | grep HWaddr | cut -f3 -dr >> $1 
+echo -n "mac=" >> $1; ifconfig $2 | grep HWaddr | awk '{print $5}' >> $1
 echo -n "ipaddr=" >> $1; ifconfig $2 | grep "inet addr" | cut -f2 -d: >> $1 
 echo -n "bcast=" >> $1; ifconfig $2 | grep "inet addr" | cut -f3 -d: >> $1 
 echo -n "mask=" >> $1; ifconfig $2 | grep "inet addr" | cut -f4 -d: >> $1 
diff -urN Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/WTGService/SigmaWTG.c Sigma_Sample_DUT_Code-Linux_v8.1.1/WTGService/SigmaWTG.c
--- Sigma_Sample_DUT_Code-Linux_v8.1.1.orig/WTGService/SigmaWTG.c	2015-02-27 14:26:48.003239730 +0300
+++ Sigma_Sample_DUT_Code-Linux_v8.1.1/WTGService/SigmaWTG.c	2015-02-27 14:26:52.835239660 +0300
@@ -57,7 +57,7 @@
     int iThreadCounter=0;
     if (argc < 2)
     {
-        printf("\n Usage : ./SigmaWTG Testbed STA Info File> \
+        DPRINT_LOG("\n Usage : ./SigmaWTG Testbed STA Info File> \
         \n    eg : ./SigmaWTG SigmaWTG.conf \n");
     } 
     else 
@@ -136,7 +136,7 @@
       else 
       {
           wfa_print("\n Invalid File Name - %s \n",argv[1]);
-          printf("\n Invalid File Name - %s \n",argv[1]);
+          DPRINT_LOG("\n Invalid File Name - %s \n",argv[1]);
       }
    }
 
